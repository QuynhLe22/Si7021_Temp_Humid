
Si7021_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000430c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080044a0  080044a0  000144a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  0800461c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001ac  2000008c  080046a8  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000238  080046a8  00020238  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000edb0  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ffc  00000000  00000000  0002ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000075c7  00000000  00000000  00030e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a18  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b50  00000000  00000000  00038e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000058cb  00000000  00000000  00039998  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003cdb  00000000  00000000  0003f263  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00042f3e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000249c  00000000  00000000  00042fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004484 	.word	0x08004484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08004484 	.word	0x08004484

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f092 0f00 	teq	r2, #0
 80004ca:	bf14      	ite	ne
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e720      	b.n	8000324 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aedc 	beq.w	80002d2 <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6c1      	b.n	80002d2 <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b97a 	b.w	8000e80 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	468c      	mov	ip, r1
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	9e08      	ldr	r6, [sp, #32]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d151      	bne.n	8000c58 <__udivmoddi4+0xb4>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	d96d      	bls.n	8000c96 <__udivmoddi4+0xf2>
 8000bba:	fab2 fe82 	clz	lr, r2
 8000bbe:	f1be 0f00 	cmp.w	lr, #0
 8000bc2:	d00b      	beq.n	8000bdc <__udivmoddi4+0x38>
 8000bc4:	f1ce 0c20 	rsb	ip, lr, #32
 8000bc8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bcc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bd0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bd4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bd8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bdc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000be0:	0c25      	lsrs	r5, r4, #16
 8000be2:	fbbc f8fa 	udiv	r8, ip, sl
 8000be6:	fa1f f987 	uxth.w	r9, r7
 8000bea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bf2:	fb08 f309 	mul.w	r3, r8, r9
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x6c>
 8000bfa:	19ed      	adds	r5, r5, r7
 8000bfc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c00:	f080 8123 	bcs.w	8000e4a <__udivmoddi4+0x2a6>
 8000c04:	42ab      	cmp	r3, r5
 8000c06:	f240 8120 	bls.w	8000e4a <__udivmoddi4+0x2a6>
 8000c0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0e:	443d      	add	r5, r7
 8000c10:	1aed      	subs	r5, r5, r3
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c20:	fb00 f909 	mul.w	r9, r0, r9
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x98>
 8000c28:	19e4      	adds	r4, r4, r7
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 810a 	bcs.w	8000e46 <__udivmoddi4+0x2a2>
 8000c32:	45a1      	cmp	r9, r4
 8000c34:	f240 8107 	bls.w	8000e46 <__udivmoddi4+0x2a2>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 0409 	sub.w	r4, r4, r9
 8000c40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c44:	2100      	movs	r1, #0
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d061      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c4e:	2300      	movs	r3, #0
 8000c50:	6034      	str	r4, [r6, #0]
 8000c52:	6073      	str	r3, [r6, #4]
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xc8>
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d054      	beq.n	8000d0a <__udivmoddi4+0x166>
 8000c60:	2100      	movs	r1, #0
 8000c62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c66:	4608      	mov	r0, r1
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	fab3 f183 	clz	r1, r3
 8000c70:	2900      	cmp	r1, #0
 8000c72:	f040 808e 	bne.w	8000d92 <__udivmoddi4+0x1ee>
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xdc>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80fa 	bhi.w	8000e74 <__udivmoddi4+0x2d0>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb65 0503 	sbc.w	r5, r5, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	46ac      	mov	ip, r5
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d03f      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	b912      	cbnz	r2, 8000c9e <__udivmoddi4+0xfa>
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c9e:	fab7 fe87 	clz	lr, r7
 8000ca2:	f1be 0f00 	cmp.w	lr, #0
 8000ca6:	d134      	bne.n	8000d12 <__udivmoddi4+0x16e>
 8000ca8:	1beb      	subs	r3, r5, r7
 8000caa:	0c3a      	lsrs	r2, r7, #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cb6:	0c25      	lsrs	r5, r4, #16
 8000cb8:	fb02 3318 	mls	r3, r2, r8, r3
 8000cbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cc0:	fb0c f308 	mul.w	r3, ip, r8
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x134>
 8000cc8:	19ed      	adds	r5, r5, r7
 8000cca:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x132>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f200 80d1 	bhi.w	8000e78 <__udivmoddi4+0x2d4>
 8000cd6:	4680      	mov	r8, r0
 8000cd8:	1aed      	subs	r5, r5, r3
 8000cda:	b2a3      	uxth	r3, r4
 8000cdc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000ce0:	fb02 5510 	mls	r5, r2, r0, r5
 8000ce4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000ce8:	fb0c fc00 	mul.w	ip, ip, r0
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x15c>
 8000cf0:	19e4      	adds	r4, r4, r7
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x15a>
 8000cf8:	45a4      	cmp	ip, r4
 8000cfa:	f200 80b8 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cfe:	4618      	mov	r0, r3
 8000d00:	eba4 040c 	sub.w	r4, r4, ip
 8000d04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d08:	e79d      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	f1ce 0420 	rsb	r4, lr, #32
 8000d16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000d22:	0c3a      	lsrs	r2, r7, #16
 8000d24:	fa25 f404 	lsr.w	r4, r5, r4
 8000d28:	ea48 0803 	orr.w	r8, r8, r3
 8000d2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d34:	fb02 4411 	mls	r4, r2, r1, r4
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d40:	fb01 f30c 	mul.w	r3, r1, ip
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x1bc>
 8000d4c:	19ed      	adds	r5, r5, r7
 8000d4e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d52:	f080 808a 	bcs.w	8000e6a <__udivmoddi4+0x2c6>
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	f240 8087 	bls.w	8000e6a <__udivmoddi4+0x2c6>
 8000d5c:	3902      	subs	r1, #2
 8000d5e:	443d      	add	r5, r7
 8000d60:	1aeb      	subs	r3, r5, r3
 8000d62:	fa1f f588 	uxth.w	r5, r8
 8000d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000d6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d72:	fb00 f30c 	mul.w	r3, r0, ip
 8000d76:	42ab      	cmp	r3, r5
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x1e6>
 8000d7a:	19ed      	adds	r5, r5, r7
 8000d7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d80:	d26f      	bcs.n	8000e62 <__udivmoddi4+0x2be>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d96d      	bls.n	8000e62 <__udivmoddi4+0x2be>
 8000d86:	3802      	subs	r0, #2
 8000d88:	443d      	add	r5, r7
 8000d8a:	1aeb      	subs	r3, r5, r3
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	e78f      	b.n	8000cb2 <__udivmoddi4+0x10e>
 8000d92:	f1c1 0720 	rsb	r7, r1, #32
 8000d96:	fa22 f807 	lsr.w	r8, r2, r7
 8000d9a:	408b      	lsls	r3, r1
 8000d9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000da0:	ea48 0303 	orr.w	r3, r8, r3
 8000da4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000da8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000db2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000db6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dbe:	fa1f f883 	uxth.w	r8, r3
 8000dc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dc6:	fb09 f408 	mul.w	r4, r9, r8
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x244>
 8000dd6:	18ed      	adds	r5, r5, r3
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d243      	bcs.n	8000e66 <__udivmoddi4+0x2c2>
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	d941      	bls.n	8000e66 <__udivmoddi4+0x2c2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	441d      	add	r5, r3
 8000de8:	1b2d      	subs	r5, r5, r4
 8000dea:	fa1f fe8e 	uxth.w	lr, lr
 8000dee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000df2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000df6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45a0      	cmp	r8, r4
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x26e>
 8000e02:	18e4      	adds	r4, r4, r3
 8000e04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e08:	d229      	bcs.n	8000e5e <__udivmoddi4+0x2ba>
 8000e0a:	45a0      	cmp	r8, r4
 8000e0c:	d927      	bls.n	8000e5e <__udivmoddi4+0x2ba>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	441c      	add	r4, r3
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba4 0408 	sub.w	r4, r4, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	464d      	mov	r5, r9
 8000e24:	d315      	bcc.n	8000e52 <__udivmoddi4+0x2ae>
 8000e26:	d012      	beq.n	8000e4e <__udivmoddi4+0x2aa>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x29c>
 8000e2a:	ebba 030e 	subs.w	r3, sl, lr
 8000e2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40cb      	lsrs	r3, r1
 8000e38:	431f      	orrs	r7, r3
 8000e3a:	40cc      	lsrs	r4, r1
 8000e3c:	6037      	str	r7, [r6, #0]
 8000e3e:	6074      	str	r4, [r6, #4]
 8000e40:	2100      	movs	r1, #0
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	4618      	mov	r0, r3
 8000e48:	e6f8      	b.n	8000c3c <__udivmoddi4+0x98>
 8000e4a:	4690      	mov	r8, r2
 8000e4c:	e6e0      	b.n	8000c10 <__udivmoddi4+0x6c>
 8000e4e:	45c2      	cmp	sl, r8
 8000e50:	d2ea      	bcs.n	8000e28 <__udivmoddi4+0x284>
 8000e52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e56:	eb69 0503 	sbc.w	r5, r9, r3
 8000e5a:	3801      	subs	r0, #1
 8000e5c:	e7e4      	b.n	8000e28 <__udivmoddi4+0x284>
 8000e5e:	4628      	mov	r0, r5
 8000e60:	e7d7      	b.n	8000e12 <__udivmoddi4+0x26e>
 8000e62:	4640      	mov	r0, r8
 8000e64:	e791      	b.n	8000d8a <__udivmoddi4+0x1e6>
 8000e66:	4681      	mov	r9, r0
 8000e68:	e7be      	b.n	8000de8 <__udivmoddi4+0x244>
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	e778      	b.n	8000d60 <__udivmoddi4+0x1bc>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	443c      	add	r4, r7
 8000e72:	e745      	b.n	8000d00 <__udivmoddi4+0x15c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xe6>
 8000e78:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7c:	443d      	add	r5, r7
 8000e7e:	e72b      	b.n	8000cd8 <__udivmoddi4+0x134>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_InitTick+0x2c>)
{
 8000e88:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e94:	f000 f880 	bl	8000f98 <HAL_SYSTICK_Config>
 8000e98:	4604      	mov	r4, r0
 8000e9a:	b938      	cbnz	r0, 8000eac <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 f844 	bl	8000f30 <HAL_NVIC_SetPriority>
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000eac:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	20000024 	.word	0x20000024

08000eb4 <HAL_Init>:
{
 8000eb4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f828 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff ffe1 	bl	8000e84 <HAL_InitTick>
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	b918      	cbnz	r0, 8000ece <HAL_Init+0x1a>
    HAL_MspInit();
 8000ec6:	f001 fe43 	bl	8002b50 <HAL_MspInit>
}
 8000eca:	4620      	mov	r0, r4
 8000ecc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000ece:	2401      	movs	r4, #1
 8000ed0:	e7fb      	b.n	8000eca <HAL_Init+0x16>
	...

08000ed4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ed4:	4a02      	ldr	r2, [pc, #8]	; (8000ee0 <HAL_IncTick+0xc>)
 8000ed6:	6813      	ldr	r3, [r2, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200000c4 	.word	0x200000c4

08000ee4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ee4:	4b01      	ldr	r3, [pc, #4]	; (8000eec <HAL_GetTick+0x8>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200000c4 	.word	0x200000c4

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff fff6 	bl	8000ee4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000efa:	4605      	mov	r5, r0
  {
    wait++;
 8000efc:	bf18      	it	ne
 8000efe:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f00:	f7ff fff0 	bl	8000ee4 <HAL_GetTick>
 8000f04:	1b40      	subs	r0, r0, r5
 8000f06:	4284      	cmp	r4, r0
 8000f08:	d8fa      	bhi.n	8000f00 <HAL_Delay+0x10>
  {
  }
}
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}

08000f0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f0e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f1c:	0200      	lsls	r0, r0, #8
 8000f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f26:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f28:	60d3      	str	r3, [r2, #12]
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f32:	b530      	push	{r4, r5, lr}
 8000f34:	68dc      	ldr	r4, [r3, #12]
 8000f36:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	bf28      	it	cs
 8000f44:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 0501 	mov.w	r5, #1
 8000f4c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f50:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f54:	bf8c      	ite	hi
 8000f56:	3c03      	subhi	r4, #3
 8000f58:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5a:	4019      	ands	r1, r3
 8000f5c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5e:	fa05 f404 	lsl.w	r4, r5, r4
 8000f62:	3c01      	subs	r4, #1
 8000f64:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000f66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	ea42 0201 	orr.w	r2, r2, r1
 8000f6c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	bfaf      	iteee	ge
 8000f72:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	f000 000f 	andlt.w	r0, r0, #15
 8000f7a:	4b06      	ldrlt	r3, [pc, #24]	; (8000f94 <HAL_NVIC_SetPriority+0x64>)
 8000f7c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	bfa5      	ittet	ge
 8000f80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000f84:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f8c:	bd30      	pop	{r4, r5, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	e000ed14 	.word	0xe000ed14

08000f98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	3801      	subs	r0, #1
 8000f9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f9e:	d20a      	bcs.n	8000fb6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	21f0      	movs	r1, #240	; 0xf0
 8000fa8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fc6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fc8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fca:	bf0c      	ite	eq
 8000fcc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fd0:	f022 0204 	bicne.w	r2, r2, #4
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fdc:	4770      	bx	lr

08000fde <HAL_SYSTICK_IRQHandler>:
{
 8000fde:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000fe0:	f7ff fffc 	bl	8000fdc <HAL_SYSTICK_Callback>
 8000fe4:	bd08      	pop	{r3, pc}
	...

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fec:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800114c <HAL_GPIO_Init+0x164>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ff4:	4a53      	ldr	r2, [pc, #332]	; (8001144 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff6:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff8:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8000ffc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	9c01      	ldr	r4, [sp, #4]
 8001000:	40dc      	lsrs	r4, r3
 8001002:	d102      	bne.n	800100a <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8001004:	b005      	add	sp, #20
 8001006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800100a:	2401      	movs	r4, #1
 800100c:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8001010:	9c01      	ldr	r4, [sp, #4]
 8001012:	ea14 050a 	ands.w	r5, r4, sl
 8001016:	f000 808f 	beq.w	8001138 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101a:	684c      	ldr	r4, [r1, #4]
 800101c:	f024 0b10 	bic.w	fp, r4, #16
 8001020:	f1bb 0f02 	cmp.w	fp, #2
 8001024:	d111      	bne.n	800104a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 8001026:	08df      	lsrs	r7, r3, #3
 8001028:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800102c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001030:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001032:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001036:	fa09 fc0e 	lsl.w	ip, r9, lr
 800103a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800103e:	690e      	ldr	r6, [r1, #16]
 8001040:	fa06 f60e 	lsl.w	r6, r6, lr
 8001044:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001048:	623e      	str	r6, [r7, #32]
 800104a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800104e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001050:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001052:	fa07 f70c 	lsl.w	r7, r7, ip
 8001056:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001058:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800105e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001066:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800106e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001070:	d811      	bhi.n	8001096 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001072:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001074:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001078:	68ce      	ldr	r6, [r1, #12]
 800107a:	fa06 fe0c 	lsl.w	lr, r6, ip
 800107e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001082:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001084:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001086:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800108a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800108e:	409e      	lsls	r6, r3
 8001090:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001094:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001096:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001098:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800109a:	688e      	ldr	r6, [r1, #8]
 800109c:	fa06 f60c 	lsl.w	r6, r6, ip
 80010a0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80010a4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a6:	d547      	bpl.n	8001138 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a8:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010ac:	f046 0601 	orr.w	r6, r6, #1
 80010b0:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80010b4:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010b8:	f023 0703 	bic.w	r7, r3, #3
 80010bc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80010c0:	f006 0601 	and.w	r6, r6, #1
 80010c4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80010c8:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ca:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80010d0:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010d6:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010da:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010de:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e2:	d02b      	beq.n	800113c <HAL_GPIO_Init+0x154>
 80010e4:	4e18      	ldr	r6, [pc, #96]	; (8001148 <HAL_GPIO_Init+0x160>)
 80010e6:	42b0      	cmp	r0, r6
 80010e8:	d02a      	beq.n	8001140 <HAL_GPIO_Init+0x158>
 80010ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010ee:	42b0      	cmp	r0, r6
 80010f0:	bf14      	ite	ne
 80010f2:	2607      	movne	r6, #7
 80010f4:	2602      	moveq	r6, #2
 80010f6:	fa06 f60e 	lsl.w	r6, r6, lr
 80010fa:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010fe:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001100:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 8001102:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001104:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001108:	bf0c      	ite	eq
 800110a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800110c:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800110e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8001110:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001112:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001116:	bf0c      	ite	eq
 8001118:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800111a:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800111c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 800111e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001120:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001124:	bf0c      	ite	eq
 8001126:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001128:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 800112a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 800112c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112e:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001130:	bf54      	ite	pl
 8001132:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001134:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8001136:	60d6      	str	r6, [r2, #12]
    position++;
 8001138:	3301      	adds	r3, #1
 800113a:	e760      	b.n	8000ffe <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800113c:	2600      	movs	r6, #0
 800113e:	e7da      	b.n	80010f6 <HAL_GPIO_Init+0x10e>
 8001140:	2601      	movs	r6, #1
 8001142:	e7d8      	b.n	80010f6 <HAL_GPIO_Init+0x10e>
 8001144:	40010400 	.word	0x40010400
 8001148:	48000400 	.word	0x48000400
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001150:	b10a      	cbz	r2, 8001156 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001152:	6181      	str	r1, [r0, #24]
 8001154:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001156:	6281      	str	r1, [r0, #40]	; 0x28
 8001158:	4770      	bx	lr

0800115a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800115a:	6803      	ldr	r3, [r0, #0]
 800115c:	699a      	ldr	r2, [r3, #24]
 800115e:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001160:	bf44      	itt	mi
 8001162:	2200      	movmi	r2, #0
 8001164:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800116a:	bf5e      	ittt	pl
 800116c:	699a      	ldrpl	r2, [r3, #24]
 800116e:	f042 0201 	orrpl.w	r2, r2, #1
 8001172:	619a      	strpl	r2, [r3, #24]
 8001174:	4770      	bx	lr

08001176 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001176:	b530      	push	{r4, r5, lr}
 8001178:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800117a:	6805      	ldr	r5, [r0, #0]
 800117c:	4323      	orrs	r3, r4
 800117e:	0d64      	lsrs	r4, r4, #21
 8001180:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001184:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001188:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800118c:	6868      	ldr	r0, [r5, #4]
 800118e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001192:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001196:	4319      	orrs	r1, r3
 8001198:	f044 0403 	orr.w	r4, r4, #3
 800119c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80011a0:	ea20 0404 	bic.w	r4, r0, r4
 80011a4:	4321      	orrs	r1, r4
 80011a6:	6069      	str	r1, [r5, #4]
 80011a8:	bd30      	pop	{r4, r5, pc}

080011aa <I2C_WaitOnFlagUntilTimeout>:
{
 80011aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ae:	9f06      	ldr	r7, [sp, #24]
 80011b0:	4604      	mov	r4, r0
 80011b2:	4688      	mov	r8, r1
 80011b4:	4616      	mov	r6, r2
 80011b6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011b8:	6822      	ldr	r2, [r4, #0]
 80011ba:	6993      	ldr	r3, [r2, #24]
 80011bc:	ea38 0303 	bics.w	r3, r8, r3
 80011c0:	bf0c      	ite	eq
 80011c2:	2301      	moveq	r3, #1
 80011c4:	2300      	movne	r3, #0
 80011c6:	42b3      	cmp	r3, r6
 80011c8:	d002      	beq.n	80011d0 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80011ca:	2000      	movs	r0, #0
}
 80011cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80011d0:	1c6b      	adds	r3, r5, #1
 80011d2:	d0f2      	beq.n	80011ba <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011d4:	f7ff fe86 	bl	8000ee4 <HAL_GetTick>
 80011d8:	1bc0      	subs	r0, r0, r7
 80011da:	4285      	cmp	r5, r0
 80011dc:	d301      	bcc.n	80011e2 <I2C_WaitOnFlagUntilTimeout+0x38>
 80011de:	2d00      	cmp	r5, #0
 80011e0:	d1ea      	bne.n	80011b8 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011ea:	2320      	movs	r3, #32
 80011ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80011f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80011fa:	2001      	movs	r0, #1
 80011fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001200 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001200:	6803      	ldr	r3, [r0, #0]
{
 8001202:	b570      	push	{r4, r5, r6, lr}
 8001204:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001206:	6998      	ldr	r0, [r3, #24]
 8001208:	f010 0010 	ands.w	r0, r0, #16
{
 800120c:	460d      	mov	r5, r1
 800120e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001210:	d116      	bne.n	8001240 <I2C_IsAcknowledgeFailed+0x40>
 8001212:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001214:	1c69      	adds	r1, r5, #1
 8001216:	d014      	beq.n	8001242 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001218:	f7ff fe64 	bl	8000ee4 <HAL_GetTick>
 800121c:	1b80      	subs	r0, r0, r6
 800121e:	4285      	cmp	r5, r0
 8001220:	d300      	bcc.n	8001224 <I2C_IsAcknowledgeFailed+0x24>
 8001222:	b96d      	cbnz	r5, 8001240 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001224:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001226:	f043 0320 	orr.w	r3, r3, #32
 800122a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800122c:	2320      	movs	r3, #32
 800122e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001232:	2300      	movs	r3, #0
 8001234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001238:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800123c:	2001      	movs	r0, #1
}
 800123e:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	6999      	ldr	r1, [r3, #24]
 8001244:	068a      	lsls	r2, r1, #26
 8001246:	d5e5      	bpl.n	8001214 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001248:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800124a:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800124c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800124e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001250:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001252:	f7ff ff82 	bl	800115a <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	6853      	ldr	r3, [r2, #4]
 800125a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800125e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001262:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001266:	f023 0301 	bic.w	r3, r3, #1
 800126a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800126c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001274:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001278:	e7db      	b.n	8001232 <I2C_IsAcknowledgeFailed+0x32>

0800127a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800127a:	b570      	push	{r4, r5, r6, lr}
 800127c:	4604      	mov	r4, r0
 800127e:	460d      	mov	r5, r1
 8001280:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	079b      	lsls	r3, r3, #30
 8001288:	d501      	bpl.n	800128e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800128a:	2000      	movs	r0, #0
 800128c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800128e:	4632      	mov	r2, r6
 8001290:	4629      	mov	r1, r5
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff ffb4 	bl	8001200 <I2C_IsAcknowledgeFailed>
 8001298:	b9a0      	cbnz	r0, 80012c4 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800129a:	1c6a      	adds	r2, r5, #1
 800129c:	d0f1      	beq.n	8001282 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800129e:	f7ff fe21 	bl	8000ee4 <HAL_GetTick>
 80012a2:	1b80      	subs	r0, r0, r6
 80012a4:	4285      	cmp	r5, r0
 80012a6:	d301      	bcc.n	80012ac <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d1ea      	bne.n	8001282 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80012b4:	2320      	movs	r3, #32
 80012b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80012c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80012c4:	2001      	movs	r0, #1
}
 80012c6:	bd70      	pop	{r4, r5, r6, pc}

080012c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	069b      	lsls	r3, r3, #26
 80012d6:	d501      	bpl.n	80012dc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80012d8:	2000      	movs	r0, #0
 80012da:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012dc:	4632      	mov	r2, r6
 80012de:	4629      	mov	r1, r5
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff ff8d 	bl	8001200 <I2C_IsAcknowledgeFailed>
 80012e6:	b990      	cbnz	r0, 800130e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012e8:	f7ff fdfc 	bl	8000ee4 <HAL_GetTick>
 80012ec:	1b80      	subs	r0, r0, r6
 80012ee:	4285      	cmp	r5, r0
 80012f0:	d301      	bcc.n	80012f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80012f2:	2d00      	cmp	r5, #0
 80012f4:	d1ec      	bne.n	80012d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80012fe:	2320      	movs	r3, #32
 8001300:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001304:	2300      	movs	r3, #0
 8001306:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800130a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800130e:	2001      	movs	r0, #1
}
 8001310:	bd70      	pop	{r4, r5, r6, pc}

08001312 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001312:	b570      	push	{r4, r5, r6, lr}
 8001314:	4604      	mov	r4, r0
 8001316:	460d      	mov	r5, r1
 8001318:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	075b      	lsls	r3, r3, #29
 8001320:	d40e      	bmi.n	8001340 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001322:	4632      	mov	r2, r6
 8001324:	4629      	mov	r1, r5
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff ff6a 	bl	8001200 <I2C_IsAcknowledgeFailed>
 800132c:	b9f0      	cbnz	r0, 800136c <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	0691      	lsls	r1, r2, #26
 8001334:	d51c      	bpl.n	8001370 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001336:	699a      	ldr	r2, [r3, #24]
 8001338:	0752      	lsls	r2, r2, #29
 800133a:	d503      	bpl.n	8001344 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 800133c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800133e:	b10a      	cbz	r2, 8001344 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8001340:	2000      	movs	r0, #0
 8001342:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001344:	2120      	movs	r1, #32
 8001346:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800134e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001352:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800135c:	2300      	movs	r3, #0
 800135e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001360:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001368:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
}
 800136e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001370:	f7ff fdb8 	bl	8000ee4 <HAL_GetTick>
 8001374:	1b80      	subs	r0, r0, r6
 8001376:	4285      	cmp	r5, r0
 8001378:	d301      	bcc.n	800137e <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800137a:	2d00      	cmp	r5, #0
 800137c:	d1cd      	bne.n	800131a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800137e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001380:	f043 0320 	orr.w	r3, r3, #32
 8001384:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001386:	2320      	movs	r3, #32
 8001388:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800138c:	2300      	movs	r3, #0
 800138e:	e7eb      	b.n	8001368 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08001390 <HAL_I2C_Init>:
{
 8001390:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001392:	4604      	mov	r4, r0
 8001394:	2800      	cmp	r0, #0
 8001396:	d04a      	beq.n	800142e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001398:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800139c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013a0:	b91b      	cbnz	r3, 80013aa <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80013a2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80013a6:	f001 fc19 	bl	8002bdc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013aa:	2324      	movs	r3, #36	; 0x24
 80013ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80013b0:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013b2:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013bc:	6862      	ldr	r2, [r4, #4]
 80013be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013c2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013c4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013c6:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013d0:	d124      	bne.n	800141c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013d8:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013da:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80013e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ec:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013ee:	6922      	ldr	r2, [r4, #16]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	69a1      	ldr	r1, [r4, #24]
 80013f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013f8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013fa:	6a21      	ldr	r1, [r4, #32]
 80013fc:	69e2      	ldr	r2, [r4, #28]
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	f042 0201 	orr.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800140c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001410:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001414:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001416:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800141a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800141c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001420:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001422:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001424:	bf04      	itt	eq
 8001426:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800142a:	605a      	streq	r2, [r3, #4]
 800142c:	e7d4      	b.n	80013d8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800142e:	2001      	movs	r0, #1
}
 8001430:	bd10      	pop	{r4, pc}
	...

08001434 <HAL_I2C_Master_Transmit>:
{
 8001434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001438:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800143a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800143e:	2b20      	cmp	r3, #32
{
 8001440:	4604      	mov	r4, r0
 8001442:	460e      	mov	r6, r1
 8001444:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001446:	f040 8084 	bne.w	8001552 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 800144a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800144e:	2b01      	cmp	r3, #1
 8001450:	d07f      	beq.n	8001552 <HAL_I2C_Master_Transmit+0x11e>
 8001452:	2701      	movs	r7, #1
 8001454:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001458:	f7ff fd44 	bl	8000ee4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800145c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800145e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001460:	9000      	str	r0, [sp, #0]
 8001462:	463a      	mov	r2, r7
 8001464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff fe9e 	bl	80011aa <I2C_WaitOnFlagUntilTimeout>
 800146e:	b118      	cbz	r0, 8001478 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8001470:	2001      	movs	r0, #1
}
 8001472:	b003      	add	sp, #12
 8001474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001478:	2321      	movs	r3, #33	; 0x21
 800147a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800147e:	2310      	movs	r3, #16
 8001480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001484:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001486:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800148a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800148c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001490:	b29b      	uxth	r3, r3
 8001492:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001494:	6360      	str	r0, [r4, #52]	; 0x34
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001498:	d926      	bls.n	80014e8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800149a:	22ff      	movs	r2, #255	; 0xff
 800149c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800149e:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014a4:	4631      	mov	r1, r6
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff fe65 	bl	8001176 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ae:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80014b0:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b2:	462a      	mov	r2, r5
 80014b4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80014b6:	b9fb      	cbnz	r3, 80014f8 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b8:	f7ff ff06 	bl	80012c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d1d7      	bne.n	8001470 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014c0:	6823      	ldr	r3, [r4, #0]
 80014c2:	2120      	movs	r1, #32
 80014c4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80014cc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80014d0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80014da:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80014de:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014e2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80014e6:	e7c4      	b.n	8001472 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80014e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80014ea:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80014ec:	b292      	uxth	r2, r2
 80014ee:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	e7d5      	b.n	80014a4 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f8:	f7ff febf 	bl	800127a <I2C_WaitOnTXISFlagUntilTimeout>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d1b7      	bne.n	8001470 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001508:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800150a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800150c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800150e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001510:	3b01      	subs	r3, #1
 8001512:	b29b      	uxth	r3, r3
 8001514:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001516:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001518:	3a01      	subs	r2, #1
 800151a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800151c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800151e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0c3      	beq.n	80014ac <HAL_I2C_Master_Transmit+0x78>
 8001524:	2a00      	cmp	r2, #0
 8001526:	d1c1      	bne.n	80014ac <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001528:	9500      	str	r5, [sp, #0]
 800152a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff fe3b 	bl	80011aa <I2C_WaitOnFlagUntilTimeout>
 8001534:	2800      	cmp	r0, #0
 8001536:	d19b      	bne.n	8001470 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001538:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800153a:	b29b      	uxth	r3, r3
 800153c:	2bff      	cmp	r3, #255	; 0xff
 800153e:	d903      	bls.n	8001548 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001540:	22ff      	movs	r2, #255	; 0xff
 8001542:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001544:	9000      	str	r0, [sp, #0]
 8001546:	e7ab      	b.n	80014a0 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8001548:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800154a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800154c:	b292      	uxth	r2, r2
 800154e:	8522      	strh	r2, [r4, #40]	; 0x28
 8001550:	e7ce      	b.n	80014f0 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8001552:	2002      	movs	r0, #2
 8001554:	e78d      	b.n	8001472 <HAL_I2C_Master_Transmit+0x3e>
 8001556:	bf00      	nop
 8001558:	80002000 	.word	0x80002000

0800155c <HAL_I2C_Master_Receive>:
{
 800155c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001560:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001562:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001566:	2b20      	cmp	r3, #32
{
 8001568:	4604      	mov	r4, r0
 800156a:	460e      	mov	r6, r1
 800156c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800156e:	f040 8086 	bne.w	800167e <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8001572:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001576:	2b01      	cmp	r3, #1
 8001578:	f000 8081 	beq.w	800167e <HAL_I2C_Master_Receive+0x122>
 800157c:	2701      	movs	r7, #1
 800157e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001582:	f7ff fcaf 	bl	8000ee4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001586:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001588:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800158a:	9000      	str	r0, [sp, #0]
 800158c:	463a      	mov	r2, r7
 800158e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff fe09 	bl	80011aa <I2C_WaitOnFlagUntilTimeout>
 8001598:	b118      	cbz	r0, 80015a2 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 800159a:	2001      	movs	r0, #1
}
 800159c:	b003      	add	sp, #12
 800159e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015a2:	2322      	movs	r3, #34	; 0x22
 80015a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015a8:	2310      	movs	r3, #16
 80015aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ae:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80015b0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80015b6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80015be:	6360      	str	r0, [r4, #52]	; 0x34
 80015c0:	4b30      	ldr	r3, [pc, #192]	; (8001684 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c2:	d926      	bls.n	8001612 <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015c4:	22ff      	movs	r2, #255	; 0xff
 80015c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80015c8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015ce:	4631      	mov	r1, r6
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fdd0 	bl	8001176 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d8:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80015da:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015dc:	462a      	mov	r2, r5
 80015de:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80015e0:	b9fb      	cbnz	r3, 8001622 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e2:	f7ff fe71 	bl	80012c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d1d7      	bne.n	800159a <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	2120      	movs	r1, #32
 80015ee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80015f6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80015fa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001604:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001608:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800160c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001610:	e7c4      	b.n	800159c <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8001612:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001614:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001616:	b292      	uxth	r2, r2
 8001618:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800161a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	e7d5      	b.n	80015ce <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001622:	f7ff fe76 	bl	8001312 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001626:	2800      	cmp	r0, #0
 8001628:	d1b7      	bne.n	800159a <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800162e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001630:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001632:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001634:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001636:	3301      	adds	r3, #1
 8001638:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800163a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800163c:	3b01      	subs	r3, #1
 800163e:	b29b      	uxth	r3, r3
 8001640:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001642:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001644:	3a01      	subs	r2, #1
 8001646:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001648:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800164a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0c2      	beq.n	80015d6 <HAL_I2C_Master_Receive+0x7a>
 8001650:	2a00      	cmp	r2, #0
 8001652:	d1c0      	bne.n	80015d6 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001654:	9500      	str	r5, [sp, #0]
 8001656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff fda5 	bl	80011aa <I2C_WaitOnFlagUntilTimeout>
 8001660:	2800      	cmp	r0, #0
 8001662:	d19a      	bne.n	800159a <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001664:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001666:	b29b      	uxth	r3, r3
 8001668:	2bff      	cmp	r3, #255	; 0xff
 800166a:	d903      	bls.n	8001674 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800166c:	22ff      	movs	r2, #255	; 0xff
 800166e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001670:	9000      	str	r0, [sp, #0]
 8001672:	e7aa      	b.n	80015ca <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8001674:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001676:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001678:	b292      	uxth	r2, r2
 800167a:	8522      	strh	r2, [r4, #40]	; 0x28
 800167c:	e7cd      	b.n	800161a <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 800167e:	2002      	movs	r0, #2
 8001680:	e78c      	b.n	800159c <HAL_I2C_Master_Receive+0x40>
 8001682:	bf00      	nop
 8001684:	80002400 	.word	0x80002400

08001688 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001688:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	2a20      	cmp	r2, #32
{
 8001690:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001692:	d11d      	bne.n	80016d0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001694:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001698:	2b01      	cmp	r3, #1
 800169a:	d019      	beq.n	80016d0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800169c:	2324      	movs	r3, #36	; 0x24
 800169e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016a2:	6803      	ldr	r3, [r0, #0]
 80016a4:	681c      	ldr	r4, [r3, #0]
 80016a6:	f024 0401 	bic.w	r4, r4, #1
 80016aa:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016ac:	681c      	ldr	r4, [r3, #0]
 80016ae:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80016b2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016b4:	681c      	ldr	r4, [r3, #0]
 80016b6:	4321      	orrs	r1, r4
 80016b8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	f041 0101 	orr.w	r1, r1, #1
 80016c0:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80016c4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80016c8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80016cc:	4618      	mov	r0, r3
 80016ce:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80016d0:	2002      	movs	r0, #2
  }
}
 80016d2:	bd10      	pop	{r4, pc}

080016d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016d4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80016da:	b2e4      	uxtb	r4, r4
 80016dc:	2c20      	cmp	r4, #32
 80016de:	d11c      	bne.n	800171a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d018      	beq.n	800171a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016e8:	2324      	movs	r3, #36	; 0x24
 80016ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016ee:	6803      	ldr	r3, [r0, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016f8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016fa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016fe:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001702:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800170e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001712:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001716:	4618      	mov	r0, r3
 8001718:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800171a:	2002      	movs	r0, #2
  }
}
 800171c:	bd10      	pop	{r4, pc}
	...

08001720 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001720:	4a02      	ldr	r2, [pc, #8]	; (800172c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4770      	bx	lr
 800172c:	40007000 	.word	0x40007000

08001730 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <HAL_PWREx_GetVoltageRange+0xc>)
 8001732:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001734:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40007000 	.word	0x40007000

08001740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001742:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001744:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001748:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800174c:	d11c      	bne.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800174e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001752:	d015      	beq.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800175a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800175e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001760:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001762:	6811      	ldr	r1, [r2, #0]
 8001764:	2232      	movs	r2, #50	; 0x32
 8001766:	434a      	muls	r2, r1
 8001768:	490f      	ldr	r1, [pc, #60]	; (80017a8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800176a:	fbb2 f2f1 	udiv	r2, r2, r1
 800176e:	4619      	mov	r1, r3
 8001770:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001772:	6958      	ldr	r0, [r3, #20]
 8001774:	0540      	lsls	r0, r0, #21
 8001776:	d500      	bpl.n	800177a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001778:	b922      	cbnz	r2, 8001784 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800177a:	694b      	ldr	r3, [r1, #20]
 800177c:	055b      	lsls	r3, r3, #21
 800177e:	d40d      	bmi.n	800179c <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001780:	2000      	movs	r0, #0
 8001782:	4770      	bx	lr
        wait_loop_index--;
 8001784:	3a01      	subs	r2, #1
 8001786:	e7f4      	b.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001788:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800178c:	bf1f      	itttt	ne
 800178e:	681a      	ldrne	r2, [r3, #0]
 8001790:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001794:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001798:	601a      	strne	r2, [r3, #0]
 800179a:	e7f1      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 800179c:	2003      	movs	r0, #3
}
 800179e:	4770      	bx	lr
 80017a0:	40007000 	.word	0x40007000
 80017a4:	20000024 	.word	0x20000024
 80017a8:	000f4240 	.word	0x000f4240

080017ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017ae:	4d1e      	ldr	r5, [pc, #120]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80017b0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80017b2:	00da      	lsls	r2, r3, #3
{
 80017b4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017b6:	d518      	bpl.n	80017ea <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017b8:	f7ff ffba 	bl	8001730 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80017c0:	d123      	bne.n	800180a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017c2:	2c80      	cmp	r4, #128	; 0x80
 80017c4:	d929      	bls.n	800181a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017c6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017c8:	bf8c      	ite	hi
 80017ca:	2002      	movhi	r0, #2
 80017cc:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	f023 0307 	bic.w	r3, r3, #7
 80017d6:	4303      	orrs	r3, r0
 80017d8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017da:	6813      	ldr	r3, [r2, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80017e0:	1a18      	subs	r0, r3, r0
 80017e2:	bf18      	it	ne
 80017e4:	2001      	movne	r0, #1
 80017e6:	b003      	add	sp, #12
 80017e8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	65ab      	str	r3, [r5, #88]	; 0x58
 80017f2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80017fc:	f7ff ff98 	bl	8001730 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001800:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001806:	65ab      	str	r3, [r5, #88]	; 0x58
 8001808:	e7d8      	b.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800180a:	2c80      	cmp	r4, #128	; 0x80
 800180c:	d807      	bhi.n	800181e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800180e:	d008      	beq.n	8001822 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001810:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001814:	4258      	negs	r0, r3
 8001816:	4158      	adcs	r0, r3
 8001818:	e7d9      	b.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800181a:	2000      	movs	r0, #0
 800181c:	e7d7      	b.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800181e:	2003      	movs	r0, #3
 8001820:	e7d5      	b.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001822:	2002      	movs	r0, #2
 8001824:	e7d3      	b.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001832:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001834:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001836:	f012 020c 	ands.w	r2, r2, #12
 800183a:	d005      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x18>
 800183c:	2a0c      	cmp	r2, #12
 800183e:	d115      	bne.n	800186c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001840:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001844:	2901      	cmp	r1, #1
 8001846:	d118      	bne.n	800187a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001848:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800184a:	4820      	ldr	r0, [pc, #128]	; (80018cc <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800184c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800184e:	bf55      	itete	pl
 8001850:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001854:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001856:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800185a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800185e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001862:	b382      	cbz	r2, 80018c6 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001864:	2a0c      	cmp	r2, #12
 8001866:	d009      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x4c>
 8001868:	2000      	movs	r0, #0
  return sysclockfreq;
 800186a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800186c:	2a04      	cmp	r2, #4
 800186e:	d029      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x94>
 8001870:	2a08      	cmp	r2, #8
 8001872:	4817      	ldr	r0, [pc, #92]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001874:	bf18      	it	ne
 8001876:	2000      	movne	r0, #0
 8001878:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800187a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800187c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800187e:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001880:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001884:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001888:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800188a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800188e:	d005      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x6c>
 8001890:	2903      	cmp	r1, #3
 8001892:	d012      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001894:	68d9      	ldr	r1, [r3, #12]
 8001896:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800189a:	e003      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800189c:	68d9      	ldr	r1, [r3, #12]
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018a0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018a4:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018a6:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018aa:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80018ae:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018b0:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018b2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80018b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80018b8:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018ba:	68d9      	ldr	r1, [r3, #12]
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018be:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80018c2:	e7ef      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80018c4:	4803      	ldr	r0, [pc, #12]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000
 80018cc:	080044cc 	.word	0x080044cc
 80018d0:	007a1200 	.word	0x007a1200
 80018d4:	00f42400 	.word	0x00f42400

080018d8 <HAL_RCC_OscConfig>:
{
 80018d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80018dc:	4605      	mov	r5, r0
 80018de:	b908      	cbnz	r0, 80018e4 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 80018e0:	2001      	movs	r0, #1
 80018e2:	e046      	b.n	8001972 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e4:	4ca8      	ldr	r4, [pc, #672]	; (8001b88 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018e6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e8:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ea:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ec:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ee:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018f6:	d572      	bpl.n	80019de <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018f8:	b11e      	cbz	r6, 8001902 <HAL_RCC_OscConfig+0x2a>
 80018fa:	2e0c      	cmp	r6, #12
 80018fc:	d151      	bne.n	80019a2 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018fe:	2f01      	cmp	r7, #1
 8001900:	d14f      	bne.n	80019a2 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	0798      	lsls	r0, r3, #30
 8001906:	d502      	bpl.n	800190e <HAL_RCC_OscConfig+0x36>
 8001908:	69ab      	ldr	r3, [r5, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0e8      	beq.n	80018e0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	6a28      	ldr	r0, [r5, #32]
 8001912:	0719      	lsls	r1, r3, #28
 8001914:	bf56      	itet	pl
 8001916:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800191a:	6823      	ldrmi	r3, [r4, #0]
 800191c:	091b      	lsrpl	r3, r3, #4
 800191e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001922:	4283      	cmp	r3, r0
 8001924:	d228      	bcs.n	8001978 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001926:	f7ff ff41 	bl	80017ac <RCC_SetFlashLatencyFromMSIRange>
 800192a:	2800      	cmp	r0, #0
 800192c:	d1d8      	bne.n	80018e0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6023      	str	r3, [r4, #0]
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	6a2a      	ldr	r2, [r5, #32]
 800193a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800193e:	4313      	orrs	r3, r2
 8001940:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001942:	6863      	ldr	r3, [r4, #4]
 8001944:	69ea      	ldr	r2, [r5, #28]
 8001946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800194a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800194e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001950:	f7ff ff6e 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 8001954:	68a3      	ldr	r3, [r4, #8]
 8001956:	4a8d      	ldr	r2, [pc, #564]	; (8001b8c <HAL_RCC_OscConfig+0x2b4>)
 8001958:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	40d8      	lsrs	r0, r3
 8001964:	4b8a      	ldr	r3, [pc, #552]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001966:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff fa8b 	bl	8000e84 <HAL_InitTick>
        if(status != HAL_OK)
 800196e:	2800      	cmp	r0, #0
 8001970:	d035      	beq.n	80019de <HAL_RCC_OscConfig+0x106>
}
 8001972:	b003      	add	sp, #12
 8001974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6023      	str	r3, [r4, #0]
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001986:	4303      	orrs	r3, r0
 8001988:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198a:	6863      	ldr	r3, [r4, #4]
 800198c:	69ea      	ldr	r2, [r5, #28]
 800198e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001992:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001996:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001998:	f7ff ff08 	bl	80017ac <RCC_SetFlashLatencyFromMSIRange>
 800199c:	2800      	cmp	r0, #0
 800199e:	d0d7      	beq.n	8001950 <HAL_RCC_OscConfig+0x78>
 80019a0:	e79e      	b.n	80018e0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019a2:	69ab      	ldr	r3, [r5, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d03a      	beq.n	8001a1e <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019b0:	f7ff fa98 	bl	8000ee4 <HAL_GetTick>
 80019b4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	079a      	lsls	r2, r3, #30
 80019ba:	d528      	bpl.n	8001a0e <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	6023      	str	r3, [r4, #0]
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	6a2a      	ldr	r2, [r5, #32]
 80019c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019cc:	4313      	orrs	r3, r2
 80019ce:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d0:	6863      	ldr	r3, [r4, #4]
 80019d2:	69ea      	ldr	r2, [r5, #28]
 80019d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019dc:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	07d8      	lsls	r0, r3, #31
 80019e2:	d42d      	bmi.n	8001a40 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	0799      	lsls	r1, r3, #30
 80019e8:	d46b      	bmi.n	8001ac2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	682b      	ldr	r3, [r5, #0]
 80019ec:	0718      	lsls	r0, r3, #28
 80019ee:	f100 80a0 	bmi.w	8001b32 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	0759      	lsls	r1, r3, #29
 80019f6:	f100 80cd 	bmi.w	8001b94 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	0699      	lsls	r1, r3, #26
 80019fe:	f100 8136 	bmi.w	8001c6e <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a02:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 815c 	bne.w	8001cc2 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	e7b1      	b.n	8001972 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fa69 	bl	8000ee4 <HAL_GetTick>
 8001a12:	eba0 0008 	sub.w	r0, r0, r8
 8001a16:	2802      	cmp	r0, #2
 8001a18:	d9cd      	bls.n	80019b6 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	e7a9      	b.n	8001972 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a26:	f7ff fa5d 	bl	8000ee4 <HAL_GetTick>
 8001a2a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	079b      	lsls	r3, r3, #30
 8001a30:	d5d5      	bpl.n	80019de <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a32:	f7ff fa57 	bl	8000ee4 <HAL_GetTick>
 8001a36:	eba0 0008 	sub.w	r0, r0, r8
 8001a3a:	2802      	cmp	r0, #2
 8001a3c:	d9f6      	bls.n	8001a2c <HAL_RCC_OscConfig+0x154>
 8001a3e:	e7ec      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a40:	2e08      	cmp	r6, #8
 8001a42:	d003      	beq.n	8001a4c <HAL_RCC_OscConfig+0x174>
 8001a44:	2e0c      	cmp	r6, #12
 8001a46:	d108      	bne.n	8001a5a <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001a48:	2f03      	cmp	r7, #3
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	039a      	lsls	r2, r3, #14
 8001a50:	d5c8      	bpl.n	80019e4 <HAL_RCC_OscConfig+0x10c>
 8001a52:	686b      	ldr	r3, [r5, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1c5      	bne.n	80019e4 <HAL_RCC_OscConfig+0x10c>
 8001a58:	e742      	b.n	80018e0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	686b      	ldr	r3, [r5, #4]
 8001a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a60:	d110      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1ac>
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fa3b 	bl	8000ee4 <HAL_GetTick>
 8001a6e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	039b      	lsls	r3, r3, #14
 8001a74:	d4b6      	bmi.n	80019e4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a76:	f7ff fa35 	bl	8000ee4 <HAL_GetTick>
 8001a7a:	eba0 0008 	sub.w	r0, r0, r8
 8001a7e:	2864      	cmp	r0, #100	; 0x64
 8001a80:	d9f6      	bls.n	8001a70 <HAL_RCC_OscConfig+0x198>
 8001a82:	e7ca      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a88:	d104      	bne.n	8001a94 <HAL_RCC_OscConfig+0x1bc>
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	e7e6      	b.n	8001a62 <HAL_RCC_OscConfig+0x18a>
 8001a94:	6822      	ldr	r2, [r4, #0]
 8001a96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a9a:	6022      	str	r2, [r4, #0]
 8001a9c:	6822      	ldr	r2, [r4, #0]
 8001a9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aa2:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fa1c 	bl	8000ee4 <HAL_GetTick>
 8001aac:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	0398      	lsls	r0, r3, #14
 8001ab2:	d597      	bpl.n	80019e4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fa16 	bl	8000ee4 <HAL_GetTick>
 8001ab8:	eba0 0008 	sub.w	r0, r0, r8
 8001abc:	2864      	cmp	r0, #100	; 0x64
 8001abe:	d9f6      	bls.n	8001aae <HAL_RCC_OscConfig+0x1d6>
 8001ac0:	e7ab      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ac2:	2e04      	cmp	r6, #4
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_OscConfig+0x1f6>
 8001ac6:	2e0c      	cmp	r6, #12
 8001ac8:	d110      	bne.n	8001aec <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001aca:	2f02      	cmp	r7, #2
 8001acc:	d10e      	bne.n	8001aec <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	0559      	lsls	r1, r3, #21
 8001ad2:	d503      	bpl.n	8001adc <HAL_RCC_OscConfig+0x204>
 8001ad4:	68eb      	ldr	r3, [r5, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f43f af02 	beq.w	80018e0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	6863      	ldr	r3, [r4, #4]
 8001ade:	692a      	ldr	r2, [r5, #16]
 8001ae0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001ae4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ae8:	6063      	str	r3, [r4, #4]
 8001aea:	e77e      	b.n	80019ea <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aec:	68eb      	ldr	r3, [r5, #12]
 8001aee:	b17b      	cbz	r3, 8001b10 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001af8:	f7ff f9f4 	bl	8000ee4 <HAL_GetTick>
 8001afc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	055a      	lsls	r2, r3, #21
 8001b02:	d4eb      	bmi.n	8001adc <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff f9ee 	bl	8000ee4 <HAL_GetTick>
 8001b08:	1bc0      	subs	r0, r0, r7
 8001b0a:	2802      	cmp	r0, #2
 8001b0c:	d9f7      	bls.n	8001afe <HAL_RCC_OscConfig+0x226>
 8001b0e:	e784      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b16:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b18:	f7ff f9e4 	bl	8000ee4 <HAL_GetTick>
 8001b1c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	055b      	lsls	r3, r3, #21
 8001b22:	f57f af62 	bpl.w	80019ea <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff f9dd 	bl	8000ee4 <HAL_GetTick>
 8001b2a:	1bc0      	subs	r0, r0, r7
 8001b2c:	2802      	cmp	r0, #2
 8001b2e:	d9f6      	bls.n	8001b1e <HAL_RCC_OscConfig+0x246>
 8001b30:	e773      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b32:	696b      	ldr	r3, [r5, #20]
 8001b34:	b19b      	cbz	r3, 8001b5e <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8001b36:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b42:	f7ff f9cf 	bl	8000ee4 <HAL_GetTick>
 8001b46:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b48:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b4c:	079a      	lsls	r2, r3, #30
 8001b4e:	f53f af50 	bmi.w	80019f2 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff f9c7 	bl	8000ee4 <HAL_GetTick>
 8001b56:	1bc0      	subs	r0, r0, r7
 8001b58:	2802      	cmp	r0, #2
 8001b5a:	d9f5      	bls.n	8001b48 <HAL_RCC_OscConfig+0x270>
 8001b5c:	e75d      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f9bb 	bl	8000ee4 <HAL_GetTick>
 8001b6e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b70:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b74:	079b      	lsls	r3, r3, #30
 8001b76:	f57f af3c 	bpl.w	80019f2 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff f9b3 	bl	8000ee4 <HAL_GetTick>
 8001b7e:	1bc0      	subs	r0, r0, r7
 8001b80:	2802      	cmp	r0, #2
 8001b82:	d9f5      	bls.n	8001b70 <HAL_RCC_OscConfig+0x298>
 8001b84:	e749      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	080044b1 	.word	0x080044b1
 8001b90:	20000024 	.word	0x20000024
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b96:	00d8      	lsls	r0, r3, #3
 8001b98:	d429      	bmi.n	8001bee <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bac:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb0:	4f71      	ldr	r7, [pc, #452]	; (8001d78 <HAL_RCC_OscConfig+0x4a0>)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	05d9      	lsls	r1, r3, #23
 8001bb6:	d51d      	bpl.n	8001bf4 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	68ab      	ldr	r3, [r5, #8]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d12b      	bne.n	8001c16 <HAL_RCC_OscConfig+0x33e>
 8001bbe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001bca:	f7ff f98b 	bl	8000ee4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bd2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001bd8:	079b      	lsls	r3, r3, #30
 8001bda:	d542      	bpl.n	8001c62 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001bdc:	f1b8 0f00 	cmp.w	r8, #0
 8001be0:	f43f af0b 	beq.w	80019fa <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	65a3      	str	r3, [r4, #88]	; 0x58
 8001bec:	e705      	b.n	80019fa <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	f04f 0800 	mov.w	r8, #0
 8001bf2:	e7dd      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001bfc:	f7ff f972 	bl	8000ee4 <HAL_GetTick>
 8001c00:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	05da      	lsls	r2, r3, #23
 8001c06:	d4d7      	bmi.n	8001bb8 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c08:	f7ff f96c 	bl	8000ee4 <HAL_GetTick>
 8001c0c:	eba0 0009 	sub.w	r0, r0, r9
 8001c10:	2802      	cmp	r0, #2
 8001c12:	d9f6      	bls.n	8001c02 <HAL_RCC_OscConfig+0x32a>
 8001c14:	e701      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_OscConfig+0x350>
 8001c1a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001c26:	e7ca      	b.n	8001bbe <HAL_RCC_OscConfig+0x2e6>
 8001c28:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001c34:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001c38:	f022 0204 	bic.w	r2, r2, #4
 8001c3c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1c2      	bne.n	8001bca <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8001c44:	f7ff f94e 	bl	8000ee4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c4c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c52:	0798      	lsls	r0, r3, #30
 8001c54:	d5c2      	bpl.n	8001bdc <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f945 	bl	8000ee4 <HAL_GetTick>
 8001c5a:	1bc0      	subs	r0, r0, r7
 8001c5c:	4548      	cmp	r0, r9
 8001c5e:	d9f6      	bls.n	8001c4e <HAL_RCC_OscConfig+0x376>
 8001c60:	e6db      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff f93f 	bl	8000ee4 <HAL_GetTick>
 8001c66:	1bc0      	subs	r0, r0, r7
 8001c68:	4548      	cmp	r0, r9
 8001c6a:	d9b3      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x2fc>
 8001c6c:	e6d5      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001c70:	b19b      	cbz	r3, 8001c9a <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8001c72:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f931 	bl	8000ee4 <HAL_GetTick>
 8001c82:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c84:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001c88:	079a      	lsls	r2, r3, #30
 8001c8a:	f53f aeba 	bmi.w	8001a02 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8e:	f7ff f929 	bl	8000ee4 <HAL_GetTick>
 8001c92:	1bc0      	subs	r0, r0, r7
 8001c94:	2802      	cmp	r0, #2
 8001c96:	d9f5      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3ac>
 8001c98:	e6bf      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8001c9a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f91d 	bl	8000ee4 <HAL_GetTick>
 8001caa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001cb0:	079b      	lsls	r3, r3, #30
 8001cb2:	f57f aea6 	bpl.w	8001a02 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb6:	f7ff f915 	bl	8000ee4 <HAL_GetTick>
 8001cba:	1bc0      	subs	r0, r0, r7
 8001cbc:	2802      	cmp	r0, #2
 8001cbe:	d9f5      	bls.n	8001cac <HAL_RCC_OscConfig+0x3d4>
 8001cc0:	e6ab      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc2:	2e0c      	cmp	r6, #12
 8001cc4:	f43f ae0c 	beq.w	80018e0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cc8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cd2:	d136      	bne.n	8001d42 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f906 	bl	8000ee4 <HAL_GetTick>
 8001cd8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	0198      	lsls	r0, r3, #6
 8001cde:	d42a      	bmi.n	8001d36 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001ce2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001ce4:	06db      	lsls	r3, r3, #27
 8001ce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001cec:	4313      	orrs	r3, r2
 8001cee:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001cf0:	3a01      	subs	r2, #1
 8001cf2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001cf6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001cf8:	0852      	lsrs	r2, r2, #1
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001d00:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001d02:	0852      	lsrs	r2, r2, #1
 8001d04:	3a01      	subs	r2, #1
 8001d06:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001d0a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d14:	68e3      	ldr	r3, [r4, #12]
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f8e2 	bl	8000ee4 <HAL_GetTick>
 8001d20:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	0199      	lsls	r1, r3, #6
 8001d26:	f53f ae70 	bmi.w	8001a0a <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f8db 	bl	8000ee4 <HAL_GetTick>
 8001d2e:	1b40      	subs	r0, r0, r5
 8001d30:	2802      	cmp	r0, #2
 8001d32:	d9f6      	bls.n	8001d22 <HAL_RCC_OscConfig+0x44a>
 8001d34:	e671      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7ff f8d5 	bl	8000ee4 <HAL_GetTick>
 8001d3a:	1b80      	subs	r0, r0, r6
 8001d3c:	2802      	cmp	r0, #2
 8001d3e:	d9cc      	bls.n	8001cda <HAL_RCC_OscConfig+0x402>
 8001d40:	e66b      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d46:	bf5e      	ittt	pl
 8001d48:	68e3      	ldrpl	r3, [r4, #12]
 8001d4a:	f023 0303 	bicpl.w	r3, r3, #3
 8001d4e:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d50:	68e3      	ldr	r3, [r4, #12]
 8001d52:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f8c2 	bl	8000ee4 <HAL_GetTick>
 8001d60:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	019b      	lsls	r3, r3, #6
 8001d66:	f57f ae50 	bpl.w	8001a0a <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff f8bb 	bl	8000ee4 <HAL_GetTick>
 8001d6e:	1b40      	subs	r0, r0, r5
 8001d70:	2802      	cmp	r0, #2
 8001d72:	d9f6      	bls.n	8001d62 <HAL_RCC_OscConfig+0x48a>
 8001d74:	e651      	b.n	8001a1a <HAL_RCC_OscConfig+0x142>
 8001d76:	bf00      	nop
 8001d78:	40007000 	.word	0x40007000

08001d7c <HAL_RCC_ClockConfig>:
{
 8001d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d80:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001d82:	4604      	mov	r4, r0
 8001d84:	b910      	cbnz	r0, 8001d8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d86:	2001      	movs	r0, #1
 8001d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <HAL_RCC_ClockConfig+0x114>)
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	428b      	cmp	r3, r1
 8001d96:	d329      	bcc.n	8001dec <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	07d9      	lsls	r1, r3, #31
 8001d9c:	d431      	bmi.n	8001e02 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9e:	6821      	ldr	r1, [r4, #0]
 8001da0:	078a      	lsls	r2, r1, #30
 8001da2:	d45b      	bmi.n	8001e5c <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4a3a      	ldr	r2, [pc, #232]	; (8001e90 <HAL_RCC_ClockConfig+0x114>)
 8001da6:	6813      	ldr	r3, [r2, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	429e      	cmp	r6, r3
 8001dae:	d35d      	bcc.n	8001e6c <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	f011 0f04 	tst.w	r1, #4
 8001db4:	4d37      	ldr	r5, [pc, #220]	; (8001e94 <HAL_RCC_ClockConfig+0x118>)
 8001db6:	d164      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	070b      	lsls	r3, r1, #28
 8001dba:	d506      	bpl.n	8001dca <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dbc:	68ab      	ldr	r3, [r5, #8]
 8001dbe:	6922      	ldr	r2, [r4, #16]
 8001dc0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dc4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dc8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dca:	f7ff fd31 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 8001dce:	68ab      	ldr	r3, [r5, #8]
 8001dd0:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <HAL_RCC_ClockConfig+0x11c>)
 8001dd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	40d8      	lsrs	r0, r3
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_RCC_ClockConfig+0x120>)
 8001de4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff b84c 	b.w	8000e84 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dec:	6813      	ldr	r3, [r2, #0]
 8001dee:	f023 0307 	bic.w	r3, r3, #7
 8001df2:	430b      	orrs	r3, r1
 8001df4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4299      	cmp	r1, r3
 8001dfe:	d1c2      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xa>
 8001e00:	e7ca      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e02:	6862      	ldr	r2, [r4, #4]
 8001e04:	4d23      	ldr	r5, [pc, #140]	; (8001e94 <HAL_RCC_ClockConfig+0x118>)
 8001e06:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e08:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	d11b      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e10:	d0b9      	beq.n	8001d86 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e12:	68ab      	ldr	r3, [r5, #8]
 8001e14:	f023 0303 	bic.w	r3, r3, #3
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001e1c:	f7ff f862 	bl	8000ee4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001e24:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	68ab      	ldr	r3, [r5, #8]
 8001e28:	6862      	ldr	r2, [r4, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e32:	d0b4      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff f856 	bl	8000ee4 <HAL_GetTick>
 8001e38:	1bc0      	subs	r0, r0, r7
 8001e3a:	4540      	cmp	r0, r8
 8001e3c:	d9f3      	bls.n	8001e26 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001e3e:	2003      	movs	r0, #3
}
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e44:	2a02      	cmp	r2, #2
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e4c:	e7e0      	b.n	8001e10 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e4e:	b912      	cbnz	r2, 8001e56 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e50:	f013 0f02 	tst.w	r3, #2
 8001e54:	e7dc      	b.n	8001e10 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e56:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001e5a:	e7d9      	b.n	8001e10 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_RCC_ClockConfig+0x118>)
 8001e5e:	68a0      	ldr	r0, [r4, #8]
 8001e60:	6893      	ldr	r3, [r2, #8]
 8001e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e66:	4303      	orrs	r3, r0
 8001e68:	6093      	str	r3, [r2, #8]
 8001e6a:	e79b      	b.n	8001da4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6c:	6813      	ldr	r3, [r2, #0]
 8001e6e:	f023 0307 	bic.w	r3, r3, #7
 8001e72:	4333      	orrs	r3, r6
 8001e74:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	429e      	cmp	r6, r3
 8001e7e:	d182      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xa>
 8001e80:	e796      	b.n	8001db0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e82:	68ab      	ldr	r3, [r5, #8]
 8001e84:	68e2      	ldr	r2, [r4, #12]
 8001e86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60ab      	str	r3, [r5, #8]
 8001e8e:	e793      	b.n	8001db8 <HAL_RCC_ClockConfig+0x3c>
 8001e90:	40022000 	.word	0x40022000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	080044b1 	.word	0x080044b1
 8001e9c:	20000024 	.word	0x20000024

08001ea0 <HAL_RCC_GetHCLKFreq>:
}
 8001ea0:	4b01      	ldr	r3, [pc, #4]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000024 	.word	0x20000024

08001eac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001eae:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eba:	6810      	ldr	r0, [r2, #0]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
}
 8001ec0:	40d8      	lsrs	r0, r3
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	080044c1 	.word	0x080044c1
 8001ecc:	20000024 	.word	0x20000024

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ed2:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ede:	6810      	ldr	r0, [r2, #0]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
}
 8001ee4:	40d8      	lsrs	r0, r3
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	080044c1 	.word	0x080044c1
 8001ef0:	20000024 	.word	0x20000024

08001ef4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ef6:	4b44      	ldr	r3, [pc, #272]	; (8002008 <RCCEx_PLLSAI1_Config+0x114>)
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	f012 0f03 	tst.w	r2, #3
{
 8001efe:	4605      	mov	r5, r0
 8001f00:	460e      	mov	r6, r1
 8001f02:	461c      	mov	r4, r3
 8001f04:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f06:	d039      	beq.n	8001f7c <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	d14b      	bne.n	8001faa <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8001f12:	2a00      	cmp	r2, #0
 8001f14:	d049      	beq.n	8001faa <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f16:	68db      	ldr	r3, [r3, #12]
       ||
 8001f18:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f1a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f1e:	3301      	adds	r3, #1
       ||
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d142      	bne.n	8001faa <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f2a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f2c:	f7fe ffda 	bl	8000ee4 <HAL_GetTick>
 8001f30:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	011a      	lsls	r2, r3, #4
 8001f36:	d441      	bmi.n	8001fbc <RCCEx_PLLSAI1_Config+0xc8>
 8001f38:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001f3a:	2e00      	cmp	r6, #0
 8001f3c:	d045      	beq.n	8001fca <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f3e:	2e01      	cmp	r6, #1
 8001f40:	d14f      	bne.n	8001fe2 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f42:	6922      	ldr	r2, [r4, #16]
 8001f44:	6928      	ldr	r0, [r5, #16]
 8001f46:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f4a:	0840      	lsrs	r0, r0, #1
 8001f4c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001f50:	3801      	subs	r0, #1
 8001f52:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001f56:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001f5a:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f62:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f64:	f7fe ffbe 	bl	8000ee4 <HAL_GetTick>
 8001f68:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	d545      	bpl.n	8001ffc <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f70:	6923      	ldr	r3, [r4, #16]
 8001f72:	69aa      	ldr	r2, [r5, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	6123      	str	r3, [r4, #16]
 8001f78:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001f7c:	2802      	cmp	r0, #2
 8001f7e:	d010      	beq.n	8001fa2 <RCCEx_PLLSAI1_Config+0xae>
 8001f80:	2803      	cmp	r0, #3
 8001f82:	d014      	beq.n	8001fae <RCCEx_PLLSAI1_Config+0xba>
 8001f84:	2801      	cmp	r0, #1
 8001f86:	d110      	bne.n	8001faa <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	079f      	lsls	r7, r3, #30
 8001f8c:	d5f5      	bpl.n	8001f7a <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f8e:	68e3      	ldr	r3, [r4, #12]
 8001f90:	686a      	ldr	r2, [r5, #4]
 8001f92:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001f96:	3a01      	subs	r2, #1
 8001f98:	4318      	orrs	r0, r3
 8001f9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001f9e:	60e0      	str	r0, [r4, #12]
 8001fa0:	e7c0      	b.n	8001f24 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fa8:	d1f1      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0x9a>
 8001faa:	2001      	movs	r0, #1
 8001fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	0391      	lsls	r1, r2, #14
 8001fb2:	d4ec      	bmi.n	8001f8e <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001fba:	e7f5      	b.n	8001fa8 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fbc:	f7fe ff92 	bl	8000ee4 <HAL_GetTick>
 8001fc0:	1bc0      	subs	r0, r0, r7
 8001fc2:	2802      	cmp	r0, #2
 8001fc4:	d9b5      	bls.n	8001f32 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fca:	6922      	ldr	r2, [r4, #16]
 8001fcc:	68e9      	ldr	r1, [r5, #12]
 8001fce:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001fd2:	06c9      	lsls	r1, r1, #27
 8001fd4:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001fd8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001fdc:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fde:	6123      	str	r3, [r4, #16]
 8001fe0:	e7bc      	b.n	8001f5c <RCCEx_PLLSAI1_Config+0x68>
 8001fe2:	6923      	ldr	r3, [r4, #16]
 8001fe4:	6968      	ldr	r0, [r5, #20]
 8001fe6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001fea:	0840      	lsrs	r0, r0, #1
 8001fec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ff0:	3801      	subs	r0, #1
 8001ff2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001ff6:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001ffa:	e7f0      	b.n	8001fde <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ffc:	f7fe ff72 	bl	8000ee4 <HAL_GetTick>
 8002000:	1b80      	subs	r0, r0, r6
 8002002:	2802      	cmp	r0, #2
 8002004:	d9b1      	bls.n	8001f6a <RCCEx_PLLSAI1_Config+0x76>
 8002006:	e7de      	b.n	8001fc6 <RCCEx_PLLSAI1_Config+0xd2>
 8002008:	40021000 	.word	0x40021000

0800200c <HAL_RCCEx_PeriphCLKConfig>:
{
 800200c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002010:	6805      	ldr	r5, [r0, #0]
 8002012:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8002016:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002018:	d00e      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800201a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800201c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002020:	d053      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002022:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002026:	d055      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8002028:	2900      	cmp	r1, #0
 800202a:	d15e      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800202c:	3004      	adds	r0, #4
 800202e:	f7ff ff61 	bl	8001ef4 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8002032:	4605      	mov	r5, r0
 8002034:	2800      	cmp	r0, #0
 8002036:	d04d      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	039e      	lsls	r6, r3, #14
 800203c:	d563      	bpl.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800203e:	4e93      	ldr	r6, [pc, #588]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002040:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002042:	00d8      	lsls	r0, r3, #3
 8002044:	f140 8116 	bpl.w	8002274 <HAL_RCCEx_PeriphCLKConfig+0x268>
    FlagStatus       pwrclkchanged = RESET;
 8002048:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800204a:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8002290 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800204e:	f8d8 3000 	ldr.w	r3, [r8]
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 800205a:	f7fe ff43 	bl	8000ee4 <HAL_GetTick>
 800205e:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002060:	f8d8 3000 	ldr.w	r3, [r8]
 8002064:	05d9      	lsls	r1, r3, #23
 8002066:	d542      	bpl.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 8002068:	2d00      	cmp	r5, #0
 800206a:	d147      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800206c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002070:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002074:	d014      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8002076:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002078:	4293      	cmp	r3, r2
 800207a:	d011      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800207c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002080:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002084:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002088:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800208c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002094:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002098:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800209c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a0:	07da      	lsls	r2, r3, #31
 80020a2:	d509      	bpl.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 80020a4:	f7fe ff1e 	bl	8000ee4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80020ac:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80020b2:	079b      	lsls	r3, r3, #30
 80020b4:	f140 80c0 	bpl.w	8002238 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80020bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80020be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80020c8:	e018      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020ca:	4a70      	ldr	r2, [pc, #448]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020cc:	68d3      	ldr	r3, [r2, #12]
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d2:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020d4:	4a6d      	ldr	r2, [pc, #436]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80020d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020e0:	430b      	orrs	r3, r1
 80020e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80020e6:	2500      	movs	r5, #0
 80020e8:	e7a6      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 80020ea:	2501      	movs	r5, #1
 80020ec:	e7a4      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ee:	f7fe fef9 	bl	8000ee4 <HAL_GetTick>
 80020f2:	eba0 0009 	sub.w	r0, r0, r9
 80020f6:	2802      	cmp	r0, #2
 80020f8:	d9b2      	bls.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 80020fa:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80020fc:	b11f      	cbz	r7, 8002106 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002104:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	07df      	lsls	r7, r3, #31
 800210a:	d508      	bpl.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800210c:	495f      	ldr	r1, [pc, #380]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800210e:	6a20      	ldr	r0, [r4, #32]
 8002110:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002114:	f022 0203 	bic.w	r2, r2, #3
 8002118:	4302      	orrs	r2, r0
 800211a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800211e:	079e      	lsls	r6, r3, #30
 8002120:	d508      	bpl.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002122:	495a      	ldr	r1, [pc, #360]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002124:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002126:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800212a:	f022 020c 	bic.w	r2, r2, #12
 800212e:	4302      	orrs	r2, r0
 8002130:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002134:	0698      	lsls	r0, r3, #26
 8002136:	d508      	bpl.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002138:	4954      	ldr	r1, [pc, #336]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800213a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800213c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002140:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002144:	4302      	orrs	r2, r0
 8002146:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800214a:	0599      	lsls	r1, r3, #22
 800214c:	d508      	bpl.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800214e:	494f      	ldr	r1, [pc, #316]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002150:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002152:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002156:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800215a:	4302      	orrs	r2, r0
 800215c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002160:	055a      	lsls	r2, r3, #21
 8002162:	d508      	bpl.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002164:	4949      	ldr	r1, [pc, #292]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002166:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002168:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800216c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002170:	4302      	orrs	r2, r0
 8002172:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002176:	065f      	lsls	r7, r3, #25
 8002178:	d508      	bpl.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217a:	4944      	ldr	r1, [pc, #272]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800217c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800217e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002182:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002186:	4302      	orrs	r2, r0
 8002188:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800218c:	05de      	lsls	r6, r3, #23
 800218e:	d508      	bpl.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002190:	493e      	ldr	r1, [pc, #248]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002192:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002194:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002198:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800219c:	4302      	orrs	r2, r0
 800219e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021a2:	0498      	lsls	r0, r3, #18
 80021a4:	d50f      	bpl.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021a6:	4a39      	ldr	r2, [pc, #228]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80021aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021ae:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80021b2:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021b4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021bc:	d144      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021be:	68d3      	ldr	r3, [r2, #12]
 80021c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	0359      	lsls	r1, r3, #13
 80021ca:	d50f      	bpl.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021cc:	4a2f      	ldr	r2, [pc, #188]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80021d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021d4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80021d8:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021da:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021e2:	d13c      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e4:	68d3      	ldr	r3, [r2, #12]
 80021e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ea:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	045a      	lsls	r2, r3, #17
 80021f0:	d512      	bpl.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021f2:	4926      	ldr	r1, [pc, #152]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80021f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021fa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80021fe:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002200:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002208:	d106      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800220a:	2102      	movs	r1, #2
 800220c:	1d20      	adds	r0, r4, #4
 800220e:	f7ff fe71 	bl	8001ef4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002212:	2800      	cmp	r0, #0
 8002214:	bf18      	it	ne
 8002216:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	d508      	bpl.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800221e:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002220:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002222:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002226:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800222a:	430b      	orrs	r3, r1
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002230:	4628      	mov	r0, r5
 8002232:	b003      	add	sp, #12
 8002234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002238:	f7fe fe54 	bl	8000ee4 <HAL_GetTick>
 800223c:	eba0 0008 	sub.w	r0, r0, r8
 8002240:	4548      	cmp	r0, r9
 8002242:	f67f af34 	bls.w	80020ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002246:	e758      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002248:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800224c:	d1bb      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800224e:	2101      	movs	r1, #1
 8002250:	1d20      	adds	r0, r4, #4
 8002252:	f7ff fe4f 	bl	8001ef4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002256:	2800      	cmp	r0, #0
 8002258:	bf18      	it	ne
 800225a:	4605      	movne	r5, r0
 800225c:	e7b3      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800225e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002262:	d1c3      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002264:	2101      	movs	r1, #1
 8002266:	1d20      	adds	r0, r4, #4
 8002268:	f7ff fe44 	bl	8001ef4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800226c:	2800      	cmp	r0, #0
 800226e:	bf18      	it	ne
 8002270:	4605      	movne	r5, r0
 8002272:	e7bb      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	65b3      	str	r3, [r6, #88]	; 0x58
 800227c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002286:	2701      	movs	r7, #1
 8002288:	e6df      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000

08002294 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002294:	4a02      	ldr	r2, [pc, #8]	; (80022a0 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000

080022a4 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80022a4:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022a6:	69c1      	ldr	r1, [r0, #28]
{
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022ac:	6883      	ldr	r3, [r0, #8]
 80022ae:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022b0:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022b2:	4303      	orrs	r3, r0
 80022b4:	6960      	ldr	r0, [r4, #20]
 80022b6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022b8:	4882      	ldr	r0, [pc, #520]	; (80024c4 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022ba:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022bc:	4028      	ands	r0, r5
 80022be:	4303      	orrs	r3, r0
 80022c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c2:	6853      	ldr	r3, [r2, #4]
 80022c4:	68e0      	ldr	r0, [r4, #12]
 80022c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ca:	4303      	orrs	r3, r0
 80022cc:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022ce:	4b7e      	ldr	r3, [pc, #504]	; (80024c8 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022d0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022d2:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022d4:	bf1c      	itt	ne
 80022d6:	6a23      	ldrne	r3, [r4, #32]
 80022d8:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022da:	6893      	ldr	r3, [r2, #8]
 80022dc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80022e0:	4303      	orrs	r3, r0
 80022e2:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022e4:	4b79      	ldr	r3, [pc, #484]	; (80024cc <UART_SetConfig+0x228>)
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d114      	bne.n	8002314 <UART_SetConfig+0x70>
 80022ea:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80022ee:	4a78      	ldr	r2, [pc, #480]	; (80024d0 <UART_SetConfig+0x22c>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022f8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	f040 80aa 	bne.w	8002456 <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8002302:	2b08      	cmp	r3, #8
 8002304:	d820      	bhi.n	8002348 <UART_SetConfig+0xa4>
 8002306:	e8df f003 	tbb	[pc, r3]
 800230a:	8f77      	.short	0x8f77
 800230c:	1f9b1f92 	.word	0x1f9b1f92
 8002310:	1f1f      	.short	0x1f1f
 8002312:	9e          	.byte	0x9e
 8002313:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002314:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <UART_SetConfig+0x230>)
 8002316:	429a      	cmp	r2, r3
 8002318:	d107      	bne.n	800232a <UART_SetConfig+0x86>
 800231a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800231e:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <UART_SetConfig+0x234>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	e7e6      	b.n	80022f8 <UART_SetConfig+0x54>
 800232a:	4b67      	ldr	r3, [pc, #412]	; (80024c8 <UART_SetConfig+0x224>)
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 80c2 	bne.w	80024b6 <UART_SetConfig+0x212>
 8002332:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002336:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800233a:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800233e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002342:	d02a      	beq.n	800239a <UART_SetConfig+0xf6>
 8002344:	d806      	bhi.n	8002354 <UART_SetConfig+0xb0>
 8002346:	b315      	cbz	r5, 800238e <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8002348:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800234a:	2300      	movs	r3, #0
 800234c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800234e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002350:	4610      	mov	r0, r2
 8002352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002354:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002358:	d006      	beq.n	8002368 <UART_SetConfig+0xc4>
 800235a:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800235e:	d1f3      	bne.n	8002348 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002360:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002364:	2508      	movs	r5, #8
 8002366:	e001      	b.n	800236c <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002368:	485c      	ldr	r0, [pc, #368]	; (80024dc <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 800236a:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800236c:	6862      	ldr	r2, [r4, #4]
 800236e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002372:	4283      	cmp	r3, r0
 8002374:	d8e8      	bhi.n	8002348 <UART_SetConfig+0xa4>
 8002376:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800237a:	d8e5      	bhi.n	8002348 <UART_SetConfig+0xa4>
        switch (clocksource)
 800237c:	2d08      	cmp	r5, #8
 800237e:	d838      	bhi.n	80023f2 <UART_SetConfig+0x14e>
 8002380:	e8df f005 	tbb	[pc, r5]
 8002384:	3726370f 	.word	0x3726370f
 8002388:	3737372e 	.word	0x3737372e
 800238c:	31          	.byte	0x31
 800238d:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800238e:	f7ff fd8d 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8002392:	2800      	cmp	r0, #0
 8002394:	d1ea      	bne.n	800236c <UART_SetConfig+0xc8>
 8002396:	4602      	mov	r2, r0
 8002398:	e7d7      	b.n	800234a <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800239a:	f7ff fa49 	bl	8001830 <HAL_RCC_GetSysClockFreq>
        break;
 800239e:	2504      	movs	r5, #4
 80023a0:	e7f7      	b.n	8002392 <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023a2:	f7ff fd83 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023a6:	6862      	ldr	r2, [r4, #4]
 80023a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ac:	0856      	lsrs	r6, r2, #1
 80023ae:	2700      	movs	r7, #0
 80023b0:	fbe1 6700 	umlal	r6, r7, r1, r0
 80023b4:	2300      	movs	r3, #0
 80023b6:	4630      	mov	r0, r6
 80023b8:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80023ba:	f7fe fbdb 	bl	8000b74 <__aeabi_uldivmod>
            break;
 80023be:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023c0:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <UART_SetConfig+0x23c>)
 80023c2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80023c6:	4299      	cmp	r1, r3
 80023c8:	d8be      	bhi.n	8002348 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	60d8      	str	r0, [r3, #12]
 80023ce:	e7bc      	b.n	800234a <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80023d0:	4844      	ldr	r0, [pc, #272]	; (80024e4 <UART_SetConfig+0x240>)
 80023d2:	0855      	lsrs	r5, r2, #1
 80023d4:	2300      	movs	r3, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80023da:	f141 0100 	adc.w	r1, r1, #0
 80023de:	e7ec      	b.n	80023ba <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023e0:	f7ff fa26 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80023e4:	e7df      	b.n	80023a6 <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80023e6:	0850      	lsrs	r0, r2, #1
 80023e8:	2100      	movs	r1, #0
 80023ea:	2300      	movs	r3, #0
 80023ec:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80023f0:	e7f3      	b.n	80023da <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 80023f2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80023f4:	2000      	movs	r0, #0
 80023f6:	e7e3      	b.n	80023c0 <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023f8:	f7ff fd58 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023fc:	6861      	ldr	r1, [r4, #4]
 80023fe:	084a      	lsrs	r2, r1, #1
 8002400:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002404:	fbb3 f3f1 	udiv	r3, r3, r1
 8002408:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800240a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800240c:	f1a3 0010 	sub.w	r0, r3, #16
 8002410:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002414:	4288      	cmp	r0, r1
 8002416:	d897      	bhi.n	8002348 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8002418:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800241c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800241e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002422:	430b      	orrs	r3, r1
 8002424:	60c3      	str	r3, [r0, #12]
 8002426:	e790      	b.n	800234a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002428:	f7ff fd52 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 800242c:	e7e6      	b.n	80023fc <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800242e:	6860      	ldr	r0, [r4, #4]
 8002430:	0843      	lsrs	r3, r0, #1
 8002432:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002436:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800243a:	fbb3 f3f0 	udiv	r3, r3, r0
 800243e:	e7e3      	b.n	8002408 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002440:	f7ff f9f6 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 8002444:	e7da      	b.n	80023fc <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002446:	6860      	ldr	r0, [r4, #4]
 8002448:	0843      	lsrs	r3, r0, #1
 800244a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800244e:	e7f4      	b.n	800243a <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 8002450:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002452:	2300      	movs	r3, #0
 8002454:	e7da      	b.n	800240c <UART_SetConfig+0x168>
    switch (clocksource)
 8002456:	2b08      	cmp	r3, #8
 8002458:	d830      	bhi.n	80024bc <UART_SetConfig+0x218>
 800245a:	e8df f003 	tbb	[pc, r3]
 800245e:	1805      	.short	0x1805
 8002460:	2f242f1b 	.word	0x2f242f1b
 8002464:	2f2f      	.short	0x2f2f
 8002466:	27          	.byte	0x27
 8002467:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002468:	f7ff fd20 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800246c:	6862      	ldr	r2, [r4, #4]
 800246e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002472:	fbb3 f3f2 	udiv	r3, r3, r2
 8002476:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002478:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800247a:	f1a3 0010 	sub.w	r0, r3, #16
 800247e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002482:	4288      	cmp	r0, r1
 8002484:	f63f af60 	bhi.w	8002348 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8002488:	6821      	ldr	r1, [r4, #0]
 800248a:	60cb      	str	r3, [r1, #12]
 800248c:	e75d      	b.n	800234a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800248e:	f7ff fd1f 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002492:	e7eb      	b.n	800246c <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002494:	6860      	ldr	r0, [r4, #4]
 8002496:	0843      	lsrs	r3, r0, #1
 8002498:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800249c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80024a4:	e7e7      	b.n	8002476 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024a6:	f7ff f9c3 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80024aa:	e7df      	b.n	800246c <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024ac:	6860      	ldr	r0, [r4, #4]
 80024ae:	0843      	lsrs	r3, r0, #1
 80024b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024b4:	e7f4      	b.n	80024a0 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80024ba:	d0c9      	beq.n	8002450 <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 80024bc:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024be:	2300      	movs	r3, #0
 80024c0:	e7db      	b.n	800247a <UART_SetConfig+0x1d6>
 80024c2:	bf00      	nop
 80024c4:	efff69f3 	.word	0xefff69f3
 80024c8:	40008000 	.word	0x40008000
 80024cc:	40013800 	.word	0x40013800
 80024d0:	080044a0 	.word	0x080044a0
 80024d4:	40004400 	.word	0x40004400
 80024d8:	080044a4 	.word	0x080044a4
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	000ffcff 	.word	0x000ffcff
 80024e4:	f4240000 	.word	0xf4240000

080024e8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024ea:	07da      	lsls	r2, r3, #31
{
 80024ec:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024ee:	d506      	bpl.n	80024fe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024f0:	6801      	ldr	r1, [r0, #0]
 80024f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80024f4:	684a      	ldr	r2, [r1, #4]
 80024f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80024fa:	4322      	orrs	r2, r4
 80024fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024fe:	079c      	lsls	r4, r3, #30
 8002500:	d506      	bpl.n	8002510 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002502:	6801      	ldr	r1, [r0, #0]
 8002504:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002506:	684a      	ldr	r2, [r1, #4]
 8002508:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800250c:	4322      	orrs	r2, r4
 800250e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002510:	0759      	lsls	r1, r3, #29
 8002512:	d506      	bpl.n	8002522 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002514:	6801      	ldr	r1, [r0, #0]
 8002516:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002518:	684a      	ldr	r2, [r1, #4]
 800251a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800251e:	4322      	orrs	r2, r4
 8002520:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002522:	071a      	lsls	r2, r3, #28
 8002524:	d506      	bpl.n	8002534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002526:	6801      	ldr	r1, [r0, #0]
 8002528:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800252a:	684a      	ldr	r2, [r1, #4]
 800252c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002530:	4322      	orrs	r2, r4
 8002532:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002534:	06dc      	lsls	r4, r3, #27
 8002536:	d506      	bpl.n	8002546 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002538:	6801      	ldr	r1, [r0, #0]
 800253a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800253c:	688a      	ldr	r2, [r1, #8]
 800253e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002542:	4322      	orrs	r2, r4
 8002544:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002546:	0699      	lsls	r1, r3, #26
 8002548:	d506      	bpl.n	8002558 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800254a:	6801      	ldr	r1, [r0, #0]
 800254c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800254e:	688a      	ldr	r2, [r1, #8]
 8002550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002554:	4322      	orrs	r2, r4
 8002556:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002558:	065a      	lsls	r2, r3, #25
 800255a:	d50f      	bpl.n	800257c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800255c:	6801      	ldr	r1, [r0, #0]
 800255e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002560:	684a      	ldr	r2, [r1, #4]
 8002562:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002566:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002568:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800256c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800256e:	d105      	bne.n	800257c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002570:	684a      	ldr	r2, [r1, #4]
 8002572:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002574:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002578:	4322      	orrs	r2, r4
 800257a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	d506      	bpl.n	800258e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002580:	6802      	ldr	r2, [r0, #0]
 8002582:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002584:	6853      	ldr	r3, [r2, #4]
 8002586:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800258a:	430b      	orrs	r3, r1
 800258c:	6053      	str	r3, [r2, #4]
 800258e:	bd10      	pop	{r4, pc}

08002590 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002594:	9d06      	ldr	r5, [sp, #24]
 8002596:	4604      	mov	r4, r0
 8002598:	460f      	mov	r7, r1
 800259a:	4616      	mov	r6, r2
 800259c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800259e:	6821      	ldr	r1, [r4, #0]
 80025a0:	69ca      	ldr	r2, [r1, #28]
 80025a2:	ea37 0302 	bics.w	r3, r7, r2
 80025a6:	bf0c      	ite	eq
 80025a8:	2201      	moveq	r2, #1
 80025aa:	2200      	movne	r2, #0
 80025ac:	42b2      	cmp	r2, r6
 80025ae:	d002      	beq.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80025b0:	2000      	movs	r0, #0
}
 80025b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	1c6b      	adds	r3, r5, #1
 80025b8:	d0f2      	beq.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025ba:	b99d      	cbnz	r5, 80025e4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80025ce:	2320      	movs	r3, #32
 80025d0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80025d4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80025d8:	2300      	movs	r3, #0
 80025da:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80025de:	2003      	movs	r0, #3
 80025e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025e4:	f7fe fc7e 	bl	8000ee4 <HAL_GetTick>
 80025e8:	eba0 0008 	sub.w	r0, r0, r8
 80025ec:	4285      	cmp	r5, r0
 80025ee:	d2d6      	bcs.n	800259e <UART_WaitOnFlagUntilTimeout+0xe>
 80025f0:	e7e4      	b.n	80025bc <UART_WaitOnFlagUntilTimeout+0x2c>

080025f2 <HAL_UART_Transmit>:
{
 80025f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80025f6:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80025f8:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80025fc:	2b20      	cmp	r3, #32
{
 80025fe:	4604      	mov	r4, r0
 8002600:	460d      	mov	r5, r1
 8002602:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002604:	d14a      	bne.n	800269c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002606:	2900      	cmp	r1, #0
 8002608:	d046      	beq.n	8002698 <HAL_UART_Transmit+0xa6>
 800260a:	2a00      	cmp	r2, #0
 800260c:	d044      	beq.n	8002698 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800260e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002612:	2b01      	cmp	r3, #1
 8002614:	d042      	beq.n	800269c <HAL_UART_Transmit+0xaa>
 8002616:	2301      	movs	r3, #1
 8002618:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261c:	2300      	movs	r3, #0
 800261e:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002620:	2321      	movs	r3, #33	; 0x21
 8002622:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002626:	f7fe fc5d 	bl	8000ee4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800262a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800262e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002630:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002634:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002638:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 800263a:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800263c:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 800263e:	b952      	cbnz	r2, 8002656 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002640:	2140      	movs	r1, #64	; 0x40
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff ffa4 	bl	8002590 <UART_WaitOnFlagUntilTimeout>
 8002648:	b958      	cbnz	r0, 8002662 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 800264a:	2320      	movs	r3, #32
 800264c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002650:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002654:	e006      	b.n	8002664 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002656:	2200      	movs	r2, #0
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff ff98 	bl	8002590 <UART_WaitOnFlagUntilTimeout>
 8002660:	b118      	cbz	r0, 800266a <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002662:	2003      	movs	r0, #3
}
 8002664:	b002      	add	sp, #8
 8002666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266a:	68a3      	ldr	r3, [r4, #8]
 800266c:	6822      	ldr	r2, [r4, #0]
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002672:	d10d      	bne.n	8002690 <HAL_UART_Transmit+0x9e>
 8002674:	6923      	ldr	r3, [r4, #16]
 8002676:	b95b      	cbnz	r3, 8002690 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002678:	f835 3b02 	ldrh.w	r3, [r5], #2
 800267c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002680:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002682:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002686:	3b01      	subs	r3, #1
 8002688:	b29b      	uxth	r3, r3
 800268a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800268e:	e7d1      	b.n	8002634 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002690:	782b      	ldrb	r3, [r5, #0]
 8002692:	8513      	strh	r3, [r2, #40]	; 0x28
 8002694:	3501      	adds	r5, #1
 8002696:	e7f4      	b.n	8002682 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002698:	2001      	movs	r0, #1
 800269a:	e7e3      	b.n	8002664 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800269c:	2002      	movs	r0, #2
 800269e:	e7e1      	b.n	8002664 <HAL_UART_Transmit+0x72>

080026a0 <UART_CheckIdleState>:
{
 80026a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026a2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a4:	2600      	movs	r6, #0
 80026a6:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80026a8:	f7fe fc1c 	bl	8000ee4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80026b2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026b4:	d417      	bmi.n	80026e6 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	075b      	lsls	r3, r3, #29
 80026bc:	d50a      	bpl.n	80026d4 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	462b      	mov	r3, r5
 80026c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7ff ff5f 	bl	8002590 <UART_WaitOnFlagUntilTimeout>
 80026d2:	b9a0      	cbnz	r0, 80026fe <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80026d4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80026d6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80026d8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80026dc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80026e0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80026e4:	e00c      	b.n	8002700 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	4632      	mov	r2, r6
 80026ee:	4603      	mov	r3, r0
 80026f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ff4b 	bl	8002590 <UART_WaitOnFlagUntilTimeout>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d0db      	beq.n	80026b6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80026fe:	2003      	movs	r0, #3
}
 8002700:	b002      	add	sp, #8
 8002702:	bd70      	pop	{r4, r5, r6, pc}

08002704 <HAL_UART_Init>:
{
 8002704:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002706:	4604      	mov	r4, r0
 8002708:	b360      	cbz	r0, 8002764 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800270e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002712:	b91b      	cbnz	r3, 800271c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002714:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002718:	f000 fa88 	bl	8002c2c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800271c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800271e:	2324      	movs	r3, #36	; 0x24
 8002720:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002724:	6813      	ldr	r3, [r2, #0]
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800272c:	4620      	mov	r0, r4
 800272e:	f7ff fdb9 	bl	80022a4 <UART_SetConfig>
 8002732:	2801      	cmp	r0, #1
 8002734:	d016      	beq.n	8002764 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002738:	b113      	cbz	r3, 8002740 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff fed4 	bl	80024e8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002748:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002750:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002758:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002760:	f7ff bf9e 	b.w	80026a0 <UART_CheckIdleState>
}
 8002764:	2001      	movs	r0, #1
 8002766:	bd10      	pop	{r4, pc}

08002768 <si7021_init>:
uint8_t read[2] = { 0xE3, 0xE5 };
uint8_t data1[3];
float temp, tempp;
float hu, humid;
uint16_t sum_temp, sum_humid;
void si7021_init() {
 8002768:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Master_Transmit(&hi2c1, 0x80, da, 1, 100);
 800276a:	2364      	movs	r3, #100	; 0x64
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	4a06      	ldr	r2, [pc, #24]	; (8002788 <si7021_init+0x20>)
 8002770:	4806      	ldr	r0, [pc, #24]	; (800278c <si7021_init+0x24>)
 8002772:	2301      	movs	r3, #1
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	f7fe fe5d 	bl	8001434 <HAL_I2C_Master_Transmit>
	HAL_Delay(200);
 800277a:	20c8      	movs	r0, #200	; 0xc8
}
 800277c:	b003      	add	sp, #12
 800277e:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_Delay(200);
 8002782:	f7fe bbb5 	b.w	8000ef0 <HAL_Delay>
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000
 800278c:	200000dc 	.word	0x200000dc

08002790 <get_si7021>:

void get_si7021(float *temp, float *humid)
{
 8002790:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_I2C_Master_Transmit(&hi2c1, 0x80, &read[0], 1, 1000);
 8002794:	4c3c      	ldr	r4, [pc, #240]	; (8002888 <get_si7021+0xf8>)
 8002796:	4d3d      	ldr	r5, [pc, #244]	; (800288c <get_si7021+0xfc>)
	HAL_I2C_Master_Receive(&hi2c1, 0x81, data, 3, 100);
 8002798:	f8df a114 	ldr.w	sl, [pc, #276]	; 80028b0 <get_si7021+0x120>
	HAL_I2C_Master_Transmit(&hi2c1, 0x80, &read[0], 1, 1000);
 800279c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 80027a0:	4681      	mov	r9, r0
 80027a2:	460f      	mov	r7, r1
	HAL_I2C_Master_Transmit(&hi2c1, 0x80, &read[0], 1, 1000);
 80027a4:	462a      	mov	r2, r5
	HAL_I2C_Master_Receive(&hi2c1, 0x81, data, 3, 100);
 80027a6:	2664      	movs	r6, #100	; 0x64
	HAL_I2C_Master_Transmit(&hi2c1, 0x80, &read[0], 1, 1000);
 80027a8:	f8cd 8000 	str.w	r8, [sp]
 80027ac:	2301      	movs	r3, #1
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	4620      	mov	r0, r4
 80027b2:	f7fe fe3f 	bl	8001434 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x81, data, 3, 100);
 80027b6:	4652      	mov	r2, sl
 80027b8:	9600      	str	r6, [sp, #0]
 80027ba:	2303      	movs	r3, #3
 80027bc:	2181      	movs	r1, #129	; 0x81
 80027be:	4620      	mov	r0, r4
 80027c0:	f7fe fecc 	bl	800155c <HAL_I2C_Master_Receive>
	sum_temp = (data[0] << 8) | data[1];
 80027c4:	f89a 2000 	ldrb.w	r2, [sl]
 80027c8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80027cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	tempp = sum_temp;
 80027d0:	ee07 3a90 	vmov	s15, r3
	sum_temp = (data[0] << 8) | data[1];
 80027d4:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <get_si7021+0x100>)
	tempp = sum_temp;
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
	sum_temp = (data[0] << 8) | data[1];
 80027da:	8013      	strh	r3, [r2, #0]
	tempp = sum_temp;
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <get_si7021+0x104>)
	*temp = (-46.85 + (175.72 * tempp) / 65536);
 80027de:	ee17 0a90 	vmov	r0, s15
	tempp = sum_temp;
 80027e2:	edc3 7a00 	vstr	s15, [r3]
	*temp = (-46.85 + (175.72 * tempp) / 65536);
 80027e6:	f7fd fe5f 	bl	80004a8 <__aeabi_f2d>
 80027ea:	a323      	add	r3, pc, #140	; (adr r3, 8002878 <get_si7021+0xe8>)
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	f7fd feae 	bl	8000550 <__aeabi_dmul>
 80027f4:	2200      	movs	r2, #0
 80027f6:	4b28      	ldr	r3, [pc, #160]	; (8002898 <get_si7021+0x108>)
 80027f8:	f7fd feaa 	bl	8000550 <__aeabi_dmul>
 80027fc:	a320      	add	r3, pc, #128	; (adr r3, 8002880 <get_si7021+0xf0>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd fcf1 	bl	80001e8 <__aeabi_dsub>
 8002806:	f7fe f965 	bl	8000ad4 <__aeabi_d2f>
 800280a:	f8c9 0000 	str.w	r0, [r9]
	HAL_Delay(20);
 800280e:	2014      	movs	r0, #20
 8002810:	f7fe fb6e 	bl	8000ef0 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, 0x80, &read[1], 1, 1000);
 8002814:	2301      	movs	r3, #1
 8002816:	18ea      	adds	r2, r5, r3
	HAL_I2C_Master_Receive(&hi2c1, 0x81, data1, 3, 100);
 8002818:	4d20      	ldr	r5, [pc, #128]	; (800289c <get_si7021+0x10c>)
	HAL_I2C_Master_Transmit(&hi2c1, 0x80, &read[1], 1, 1000);
 800281a:	f8cd 8000 	str.w	r8, [sp]
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	4620      	mov	r0, r4
 8002822:	f7fe fe07 	bl	8001434 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x81, data1, 3, 100);
 8002826:	462a      	mov	r2, r5
 8002828:	9600      	str	r6, [sp, #0]
 800282a:	2303      	movs	r3, #3
 800282c:	2181      	movs	r1, #129	; 0x81
 800282e:	4620      	mov	r0, r4
 8002830:	f7fe fe94 	bl	800155c <HAL_I2C_Master_Receive>
	sum_humid = (data1[0] << 8) | data1[1];
 8002834:	782a      	ldrb	r2, [r5, #0]
 8002836:	786b      	ldrb	r3, [r5, #1]
	hu = sum_humid;
	*humid = (-6 + (125 * (hu / 65536)));
 8002838:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80028a0 <get_si7021+0x110>
 800283c:	eddf 6a19 	vldr	s13, [pc, #100]	; 80028a4 <get_si7021+0x114>
	sum_humid = (data1[0] << 8) | data1[1];
 8002840:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	hu = sum_humid;
 8002844:	ee07 3a90 	vmov	s15, r3
	sum_humid = (data1[0] << 8) | data1[1];
 8002848:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <get_si7021+0x118>)
	hu = sum_humid;
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	sum_humid = (data1[0] << 8) | data1[1];
 800284e:	8013      	strh	r3, [r2, #0]
	hu = sum_humid;
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <get_si7021+0x11c>)
 8002852:	edc3 7a00 	vstr	s15, [r3]
	*humid = (-6 + (125 * (hu / 65536)));
 8002856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285a:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 800285e:	eea7 7aa6 	vfma.f32	s14, s15, s13
	HAL_Delay(200);
 8002862:	20c8      	movs	r0, #200	; 0xc8
	*humid = (-6 + (125 * (hu / 65536)));
 8002864:	ed87 7a00 	vstr	s14, [r7]
}
 8002868:	b002      	add	sp, #8
 800286a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_Delay(200);
 800286e:	f7fe bb3f 	b.w	8000ef0 <HAL_Delay>
 8002872:	bf00      	nop
 8002874:	f3af 8000 	nop.w
 8002878:	3d70a3d7 	.word	0x3d70a3d7
 800287c:	4065f70a 	.word	0x4065f70a
 8002880:	cccccccd 	.word	0xcccccccd
 8002884:	40476ccc 	.word	0x40476ccc
 8002888:	200000dc 	.word	0x200000dc
 800288c:	20000011 	.word	0x20000011
 8002890:	20000130 	.word	0x20000130
 8002894:	20000128 	.word	0x20000128
 8002898:	3ef00000 	.word	0x3ef00000
 800289c:	200000d4 	.word	0x200000d4
 80028a0:	37800000 	.word	0x37800000
 80028a4:	42fa0000 	.word	0x42fa0000
 80028a8:	200001b4 	.word	0x200001b4
 80028ac:	200000d8 	.word	0x200000d8
 80028b0:	200001b0 	.word	0x200001b0

080028b4 <put_xbee>:
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}// END MAIN

void put_xbee(unsigned char data_frame[]) {
 80028b4:	b508      	push	{r3, lr}

	HAL_UART_Transmit(&huart1, (uint8_t *) data_frame, 16, 100); //send data to XBEE
 80028b6:	4601      	mov	r1, r0
 80028b8:	2364      	movs	r3, #100	; 0x64
 80028ba:	2210      	movs	r2, #16
 80028bc:	4803      	ldr	r0, [pc, #12]	; (80028cc <put_xbee+0x18>)
 80028be:	f7ff fe98 	bl	80025f2 <HAL_UART_Transmit>
	HAL_Delay(200);
 80028c2:	20c8      	movs	r0, #200	; 0xc8

}
 80028c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(200);
 80028c8:	f7fe bb12 	b.w	8000ef0 <HAL_Delay>
 80028cc:	20000134 	.word	0x20000134

080028d0 <dataframeH>:

void dataframeH(char data[], unsigned char frame[]) {
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	4607      	mov	r7, r0
 80028d4:	460e      	mov	r6, r1
	//char data[] = "4+22,50";
	uint8_t i;
	unsigned char sum = 0;
	//converting data into Hex and save to dataframe
	for (i = 0; i < strlen(data); i++)
 80028d6:	2500      	movs	r5, #0
 80028d8:	4638      	mov	r0, r7
 80028da:	f7fd fc79 	bl	80001d0 <strlen>
 80028de:	b2ec      	uxtb	r4, r5
 80028e0:	42a0      	cmp	r0, r4
 80028e2:	f105 0501 	add.w	r5, r5, #1
 80028e6:	d80c      	bhi.n	8002902 <dataframeH+0x32>
 80028e8:	1cb2      	adds	r2, r6, #2
 80028ea:	f106 010e 	add.w	r1, r6, #14
 80028ee:	2300      	movs	r3, #0
		frame[9 + i] = data[i];

	//calculating checksum
	for (i = 3; i < 15; i++)
		sum += frame[i];
 80028f0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80028f4:	4403      	add	r3, r0
	for (i = 3; i < 15; i++)
 80028f6:	4291      	cmp	r1, r2
		sum += frame[i];
 80028f8:	b2db      	uxtb	r3, r3
	for (i = 3; i < 15; i++)
 80028fa:	d1f9      	bne.n	80028f0 <dataframeH+0x20>
	frame[15] = 255 ^ sum;
 80028fc:	43db      	mvns	r3, r3
 80028fe:	73f3      	strb	r3, [r6, #15]
 8002900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		frame[9 + i] = data[i];
 8002902:	5d3b      	ldrb	r3, [r7, r4]
 8002904:	4434      	add	r4, r6
 8002906:	7263      	strb	r3, [r4, #9]
 8002908:	e7e6      	b.n	80028d8 <dataframeH+0x8>
	...

0800290c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800290c:	b510      	push	{r4, lr}
 800290e:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 8002910:	f7fe ff06 	bl	8001720 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002914:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <SystemClock_Config+0xac>)
 8002916:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800291a:	f023 0318 	bic.w	r3, r3, #24
 800291e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002922:	2314      	movs	r3, #20
 8002924:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002926:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002928:	2210      	movs	r2, #16
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800292a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800292c:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800292e:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002930:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002932:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002934:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002936:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002938:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800293a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800293c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800293e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002940:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002942:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002944:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002946:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002948:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800294a:	f7fe ffc5 	bl	80018d8 <HAL_RCC_OscConfig>
 800294e:	b100      	cbz	r0, 8002952 <SystemClock_Config+0x46>
 8002950:	e7fe      	b.n	8002950 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002952:	230f      	movs	r3, #15
 8002954:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002956:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002958:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800295a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800295c:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800295e:	4621      	mov	r1, r4
 8002960:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002962:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002964:	f7ff fa0a 	bl	8001d7c <HAL_RCC_ClockConfig>
 8002968:	b100      	cbz	r0, 800296c <SystemClock_Config+0x60>
 800296a:	e7fe      	b.n	800296a <SystemClock_Config+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800296c:	2343      	movs	r3, #67	; 0x43
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800296e:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002970:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002972:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002974:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002976:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002978:	f7ff fb48 	bl	800200c <HAL_RCCEx_PeriphCLKConfig>
 800297c:	b100      	cbz	r0, 8002980 <SystemClock_Config+0x74>
 800297e:	e7fe      	b.n	800297e <SystemClock_Config+0x72>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002980:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002984:	f7fe fedc 	bl	8001740 <HAL_PWREx_ControlVoltageScaling>
 8002988:	4604      	mov	r4, r0
 800298a:	b100      	cbz	r0, 800298e <SystemClock_Config+0x82>
 800298c:	e7fe      	b.n	800298c <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800298e:	f7ff fa87 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8002992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002996:	fbb0 f0f3 	udiv	r0, r0, r3
 800299a:	f7fe fafd 	bl	8000f98 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800299e:	2004      	movs	r0, #4
 80029a0:	f7fe fb10 	bl	8000fc4 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 80029a4:	f7ff fc76 	bl	8002294 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029a8:	4622      	mov	r2, r4
 80029aa:	4621      	mov	r1, r4
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f7fe fabe 	bl	8000f30 <HAL_NVIC_SetPriority>
}
 80029b4:	b02c      	add	sp, #176	; 0xb0
 80029b6:	bd10      	pop	{r4, pc}
 80029b8:	40021000 	.word	0x40021000

080029bc <main>:
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
  HAL_Init();
 80029c0:	f7fe fa78 	bl	8000eb4 <HAL_Init>
  SystemClock_Config();
 80029c4:	f7ff ffa2 	bl	800290c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c8:	4b52      	ldr	r3, [pc, #328]	; (8002b14 <main+0x158>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80029ca:	4853      	ldr	r0, [pc, #332]	; (8002b18 <main+0x15c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ce:	f042 0204 	orr.w	r2, r2, #4
 80029d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80029d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029d6:	f002 0204 	and.w	r2, r2, #4
 80029da:	9200      	str	r2, [sp, #0]
 80029dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80029e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029e8:	f002 0201 	and.w	r2, r2, #1
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029f2:	f042 0202 	orr.w	r2, r2, #2
 80029f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2108      	movs	r1, #8

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a08:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002a0a:	f7fe fba1 	bl	8001150 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD3_Pin;
 8002a0e:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002a10:	4841      	ldr	r0, [pc, #260]	; (8002b18 <main+0x15c>)
  GPIO_InitStruct.Pin = LD3_Pin;
 8002a12:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002a14:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a16:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002a1c:	f7fe fae4 	bl	8000fe8 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002a20:	483e      	ldr	r0, [pc, #248]	; (8002b1c <main+0x160>)
  huart2.Init.BaudRate = 115200;
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <main+0x164>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a24:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002a26:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 8002a2a:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a2e:	260c      	movs	r6, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a30:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a32:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a34:	6146      	str	r6, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a38:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a3a:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a3c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a3e:	f7ff fe61 	bl	8002704 <HAL_UART_Init>
 8002a42:	b100      	cbz	r0, 8002a46 <main+0x8a>
 8002a44:	e7fe      	b.n	8002a44 <main+0x88>
  huart1.Instance = USART1;
 8002a46:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <main+0x168>)
  huart1.Init.BaudRate = 9600;
 8002a48:	4937      	ldr	r1, [pc, #220]	; (8002b28 <main+0x16c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4a:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 8002a4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a50:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a52:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a54:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a56:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a58:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5a:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a5c:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 8002a5e:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a62:	615e      	str	r6, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a64:	f7ff fe4e 	bl	8002704 <HAL_UART_Init>
 8002a68:	b100      	cbz	r0, 8002a6c <main+0xb0>
 8002a6a:	e7fe      	b.n	8002a6a <main+0xae>
  hi2c1.Instance = I2C1;
 8002a6c:	4c2f      	ldr	r4, [pc, #188]	; (8002b2c <main+0x170>)
  hi2c1.Init.Timing = 0x00707CBB;
 8002a6e:	4a30      	ldr	r2, [pc, #192]	; (8002b30 <main+0x174>)
 8002a70:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <main+0x178>)
  hi2c1.Init.OwnAddress1 = 0;
 8002a72:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a74:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a76:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a78:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a7a:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a7c:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a7e:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 8002a80:	e884 000c 	stmia.w	r4, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a84:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a86:	f7fe fc83 	bl	8001390 <HAL_I2C_Init>
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	b100      	cbz	r0, 8002a90 <main+0xd4>
 8002a8e:	e7fe      	b.n	8002a8e <main+0xd2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7fe fdf9 	bl	8001688 <HAL_I2CEx_ConfigAnalogFilter>
 8002a96:	4601      	mov	r1, r0
 8002a98:	b100      	cbz	r0, 8002a9c <main+0xe0>
 8002a9a:	e7fe      	b.n	8002a9a <main+0xde>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe fe19 	bl	80016d4 <HAL_I2CEx_ConfigDigitalFilter>
 8002aa2:	b100      	cbz	r0, 8002aa6 <main+0xea>
 8002aa4:	e7fe      	b.n	8002aa4 <main+0xe8>
  si7021_init();
 8002aa6:	f7ff fe5f 	bl	8002768 <si7021_init>
	  gcvt(temp, 5, data_t);
 8002aaa:	4f23      	ldr	r7, [pc, #140]	; (8002b38 <main+0x17c>)
	  dataframeH(data_t, temH);
 8002aac:	4e23      	ldr	r6, [pc, #140]	; (8002b3c <main+0x180>)
	  gcvt(humid, 5, data_h);
 8002aae:	4c24      	ldr	r4, [pc, #144]	; (8002b40 <main+0x184>)
	  get_si7021(&temp, &humid);
 8002ab0:	4d24      	ldr	r5, [pc, #144]	; (8002b44 <main+0x188>)
 8002ab2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002b4c <main+0x190>
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	4640      	mov	r0, r8
 8002aba:	f7ff fe69 	bl	8002790 <get_si7021>
	  gcvt(temp, 5, data_t);
 8002abe:	f8d8 0000 	ldr.w	r0, [r8]
 8002ac2:	f7fd fcf1 	bl	80004a8 <__aeabi_f2d>
 8002ac6:	ec41 0b10 	vmov	d0, r0, r1
 8002aca:	4639      	mov	r1, r7
 8002acc:	2005      	movs	r0, #5
 8002ace:	f000 f957 	bl	8002d80 <gcvt>
	  dataframeH(data_t, temH);
 8002ad2:	4631      	mov	r1, r6
 8002ad4:	4638      	mov	r0, r7
 8002ad6:	f7ff fefb 	bl	80028d0 <dataframeH>
	  put_xbee(temH);
 8002ada:	4630      	mov	r0, r6
 8002adc:	f7ff feea 	bl	80028b4 <put_xbee>
	  HAL_Delay(1000);
 8002ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ae4:	f7fe fa04 	bl	8000ef0 <HAL_Delay>
	  gcvt(humid, 5, data_h);
 8002ae8:	6828      	ldr	r0, [r5, #0]
 8002aea:	f7fd fcdd 	bl	80004a8 <__aeabi_f2d>
 8002aee:	ec41 0b10 	vmov	d0, r0, r1
 8002af2:	4621      	mov	r1, r4
 8002af4:	2005      	movs	r0, #5
 8002af6:	f000 f943 	bl	8002d80 <gcvt>
	  dataframeH(data_h, humH);
 8002afa:	4913      	ldr	r1, [pc, #76]	; (8002b48 <main+0x18c>)
 8002afc:	4620      	mov	r0, r4
 8002afe:	f7ff fee7 	bl	80028d0 <dataframeH>
	  put_xbee(humH);
 8002b02:	4811      	ldr	r0, [pc, #68]	; (8002b48 <main+0x18c>)
 8002b04:	f7ff fed6 	bl	80028b4 <put_xbee>
	  HAL_Delay(1000);
 8002b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b0c:	f7fe f9f0 	bl	8000ef0 <HAL_Delay>
 8002b10:	e7ce      	b.n	8002ab0 <main+0xf4>
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	200001b8 	.word	0x200001b8
 8002b20:	40004400 	.word	0x40004400
 8002b24:	20000134 	.word	0x20000134
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	200000dc 	.word	0x200000dc
 8002b30:	40005400 	.word	0x40005400
 8002b34:	00707cbb 	.word	0x00707cbb
 8002b38:	200000b0 	.word	0x200000b0
 8002b3c:	20000013 	.word	0x20000013
 8002b40:	200000a8 	.word	0x200000a8
 8002b44:	20000230 	.word	0x20000230
 8002b48:	20000001 	.word	0x20000001
 8002b4c:	2000012c 	.word	0x2000012c

08002b50 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b50:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_MspInit+0x88>)
{
 8002b52:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60
 8002b5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b5e:	f002 0201 	and.w	r2, r2, #1
 8002b62:	9200      	str	r2, [sp, #0]
 8002b64:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b6c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b76:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7a:	f7fe f9c7 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4611      	mov	r1, r2
 8002b82:	f06f 000b 	mvn.w	r0, #11
 8002b86:	f7fe f9d3 	bl	8000f30 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	f06f 000a 	mvn.w	r0, #10
 8002b92:	f7fe f9cd 	bl	8000f30 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	4611      	mov	r1, r2
 8002b9a:	f06f 0009 	mvn.w	r0, #9
 8002b9e:	f7fe f9c7 	bl	8000f30 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	f06f 0004 	mvn.w	r0, #4
 8002baa:	f7fe f9c1 	bl	8000f30 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	f06f 0003 	mvn.w	r0, #3
 8002bb6:	f7fe f9bb 	bl	8000f30 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	f06f 0001 	mvn.w	r0, #1
 8002bc2:	f7fe f9b5 	bl	8000f30 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f04f 30ff 	mov.w	r0, #4294967295
 8002bce:	f7fe f9af 	bl	8000f30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd2:	b003      	add	sp, #12
 8002bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bd8:	40021000 	.word	0x40021000

08002bdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002bde:	6802      	ldr	r2, [r0, #0]
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_I2C_MspInit+0x44>)
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d118      	bne.n	8002c18 <HAL_I2C_MspInit+0x3c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002be6:	23c0      	movs	r3, #192	; 0xc0
 8002be8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bea:	2312      	movs	r3, #18
 8002bec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bf6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf8:	eb0d 0103 	add.w	r1, sp, r3
 8002bfc:	4809      	ldr	r0, [pc, #36]	; (8002c24 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bfe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	f7fe f9f2 	bl	8000fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_I2C_MspInit+0x4c>)
 8002c06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c08:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c0c:	659a      	str	r2, [r3, #88]	; 0x58
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c18:	b007      	add	sp, #28
 8002c1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c1e:	bf00      	nop
 8002c20:	40005400 	.word	0x40005400
 8002c24:	48000400 	.word	0x48000400
 8002c28:	40021000 	.word	0x40021000

08002c2c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c2c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002c2e:	6803      	ldr	r3, [r0, #0]
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <HAL_UART_MspInit+0x8c>)
 8002c32:	4293      	cmp	r3, r2
{
 8002c34:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8002c36:	d11b      	bne.n	8002c70 <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c38:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_UART_MspInit+0x90>)
 8002c3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c40:	661a      	str	r2, [r3, #96]	; 0x60
 8002c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c5e:	2307      	movs	r3, #7
 8002c60:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c62:	a903      	add	r1, sp, #12
 8002c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c68:	f7fe f9be 	bl	8000fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c6c:	b008      	add	sp, #32
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <HAL_UART_MspInit+0x94>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d1fa      	bne.n	8002c6c <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_UART_MspInit+0x90>)
 8002c78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c7a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	9302      	str	r3, [sp, #8]
 8002c88:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c8a:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c92:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c96:	a903      	add	r1, sp, #12
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c9c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002ca4:	f7fe f9a0 	bl	8000fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002cb4:	9407      	str	r4, [sp, #28]
 8002cb6:	e7d4      	b.n	8002c62 <HAL_UART_MspInit+0x36>
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40004400 	.word	0x40004400

08002cc4 <NMI_Handler>:
 8002cc4:	4770      	bx	lr

08002cc6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002cc6:	e7fe      	b.n	8002cc6 <HardFault_Handler>

08002cc8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002cc8:	e7fe      	b.n	8002cc8 <MemManage_Handler>

08002cca <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002cca:	e7fe      	b.n	8002cca <BusFault_Handler>

08002ccc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002ccc:	e7fe      	b.n	8002ccc <UsageFault_Handler>

08002cce <SVC_Handler>:
 8002cce:	4770      	bx	lr

08002cd0 <DebugMon_Handler>:
 8002cd0:	4770      	bx	lr

08002cd2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002cd2:	4770      	bx	lr

08002cd4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002cd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd6:	f7fe f8fd 	bl	8000ed4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002cde:	f7fe b97e 	b.w	8000fde <HAL_SYSTICK_IRQHandler>
	...

08002ce4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	490f      	ldr	r1, [pc, #60]	; (8002d24 <SystemInit+0x40>)
 8002ce6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002cea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <SystemInit+0x44>)
 8002cf4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002cf6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002cfe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002d06:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d18:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d1a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d20:	608b      	str	r3, [r1, #8]
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00
 8002d28:	40021000 	.word	0x40021000

08002d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d32:	e003      	b.n	8002d3c <LoopCopyDataInit>

08002d34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d3a:	3104      	adds	r1, #4

08002d3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d3c:	480b      	ldr	r0, [pc, #44]	; (8002d6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d44:	d3f6      	bcc.n	8002d34 <CopyDataInit>
	ldr	r2, =_sbss
 8002d46:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d48:	e002      	b.n	8002d50 <LoopFillZerobss>

08002d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d4c:	f842 3b04 	str.w	r3, [r2], #4

08002d50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <LoopForever+0x16>)
	cmp	r2, r3
 8002d52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d54:	d3f9      	bcc.n	8002d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d56:	f7ff ffc5 	bl	8002ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d5a:	f000 f83d 	bl	8002dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d5e:	f7ff fe2d 	bl	80029bc <main>

08002d62 <LoopForever>:

LoopForever:
    b LoopForever
 8002d62:	e7fe      	b.n	8002d62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d64:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002d68:	0800461c 	.word	0x0800461c
	ldr	r0, =_sdata
 8002d6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d70:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 8002d74:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 8002d78:	20000238 	.word	0x20000238

08002d7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d7c:	e7fe      	b.n	8002d7c <ADC1_IRQHandler>
	...

08002d80 <gcvt>:
 8002d80:	b530      	push	{r4, r5, lr}
 8002d82:	ed2d 8b02 	vpush	{d8}
 8002d86:	eeb0 8a40 	vmov.f32	s16, s0
 8002d8a:	eef0 8a60 	vmov.f32	s17, s1
 8002d8e:	460c      	mov	r4, r1
 8002d90:	2200      	movs	r2, #0
 8002d92:	b083      	sub	sp, #12
 8002d94:	4605      	mov	r5, r0
 8002d96:	2300      	movs	r3, #0
 8002d98:	ec51 0b10 	vmov	r0, r1, d0
 8002d9c:	f7fd fe4a 	bl	8000a34 <__aeabi_dcmplt>
 8002da0:	4622      	mov	r2, r4
 8002da2:	b118      	cbz	r0, 8002dac <gcvt+0x2c>
 8002da4:	232d      	movs	r3, #45	; 0x2d
 8002da6:	f802 3b01 	strb.w	r3, [r2], #1
 8002daa:	3d01      	subs	r5, #1
 8002dac:	2300      	movs	r3, #0
 8002dae:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <gcvt+0x54>)
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	4629      	mov	r1, r5
 8002db4:	2367      	movs	r3, #103	; 0x67
 8002db6:	eeb0 0a48 	vmov.f32	s0, s16
 8002dba:	eef0 0a68 	vmov.f32	s1, s17
 8002dbe:	6800      	ldr	r0, [r0, #0]
 8002dc0:	f000 f8a2 	bl	8002f08 <_gcvt>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	bf14      	ite	ne
 8002dc8:	4620      	movne	r0, r4
 8002dca:	2000      	moveq	r0, #0
 8002dcc:	b003      	add	sp, #12
 8002dce:	ecbd 8b02 	vpop	{d8}
 8002dd2:	bd30      	pop	{r4, r5, pc}
 8002dd4:	20000028 	.word	0x20000028

08002dd8 <__libc_init_array>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4e0d      	ldr	r6, [pc, #52]	; (8002e10 <__libc_init_array+0x38>)
 8002ddc:	4c0d      	ldr	r4, [pc, #52]	; (8002e14 <__libc_init_array+0x3c>)
 8002dde:	1ba4      	subs	r4, r4, r6
 8002de0:	10a4      	asrs	r4, r4, #2
 8002de2:	2500      	movs	r5, #0
 8002de4:	42a5      	cmp	r5, r4
 8002de6:	d109      	bne.n	8002dfc <__libc_init_array+0x24>
 8002de8:	4e0b      	ldr	r6, [pc, #44]	; (8002e18 <__libc_init_array+0x40>)
 8002dea:	4c0c      	ldr	r4, [pc, #48]	; (8002e1c <__libc_init_array+0x44>)
 8002dec:	f001 fb4a 	bl	8004484 <_init>
 8002df0:	1ba4      	subs	r4, r4, r6
 8002df2:	10a4      	asrs	r4, r4, #2
 8002df4:	2500      	movs	r5, #0
 8002df6:	42a5      	cmp	r5, r4
 8002df8:	d105      	bne.n	8002e06 <__libc_init_array+0x2e>
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e00:	4798      	blx	r3
 8002e02:	3501      	adds	r5, #1
 8002e04:	e7ee      	b.n	8002de4 <__libc_init_array+0xc>
 8002e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e0a:	4798      	blx	r3
 8002e0c:	3501      	adds	r5, #1
 8002e0e:	e7f2      	b.n	8002df6 <__libc_init_array+0x1e>
 8002e10:	08004614 	.word	0x08004614
 8002e14:	08004614 	.word	0x08004614
 8002e18:	08004614 	.word	0x08004614
 8002e1c:	08004618 	.word	0x08004618

08002e20 <print_e>:
 8002e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e22:	b087      	sub	sp, #28
 8002e24:	ec43 2b10 	vmov	d0, r2, r3
 8002e28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002e2a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8002e2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002e30:	ab04      	add	r3, sp, #16
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	ab03      	add	r3, sp, #12
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	460f      	mov	r7, r1
 8002e3a:	ab05      	add	r3, sp, #20
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	1c62      	adds	r2, r4, #1
 8002e40:	f000 fd26 	bl	8003890 <_dtoa_r>
 8002e44:	4601      	mov	r1, r0
 8002e46:	9805      	ldr	r0, [sp, #20]
 8002e48:	f242 730f 	movw	r3, #9999	; 0x270f
 8002e4c:	4298      	cmp	r0, r3
 8002e4e:	d104      	bne.n	8002e5a <print_e+0x3a>
 8002e50:	4638      	mov	r0, r7
 8002e52:	f000 fc89 	bl	8003768 <strcpy>
 8002e56:	b007      	add	sp, #28
 8002e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5a:	780b      	ldrb	r3, [r1, #0]
 8002e5c:	703b      	strb	r3, [r7, #0]
 8002e5e:	b945      	cbnz	r5, 8002e72 <print_e+0x52>
 8002e60:	b93c      	cbnz	r4, 8002e72 <print_e+0x52>
 8002e62:	1c7b      	adds	r3, r7, #1
 8002e64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002e68:	b93a      	cbnz	r2, 8002e7a <print_e+0x5a>
 8002e6a:	2e67      	cmp	r6, #103	; 0x67
 8002e6c:	d10b      	bne.n	8002e86 <print_e+0x66>
 8002e6e:	2665      	movs	r6, #101	; 0x65
 8002e70:	e014      	b.n	8002e9c <print_e+0x7c>
 8002e72:	222e      	movs	r2, #46	; 0x2e
 8002e74:	1cbb      	adds	r3, r7, #2
 8002e76:	707a      	strb	r2, [r7, #1]
 8002e78:	e7f4      	b.n	8002e64 <print_e+0x44>
 8002e7a:	2c00      	cmp	r4, #0
 8002e7c:	ddf5      	ble.n	8002e6a <print_e+0x4a>
 8002e7e:	f803 2b01 	strb.w	r2, [r3], #1
 8002e82:	3c01      	subs	r4, #1
 8002e84:	e7ee      	b.n	8002e64 <print_e+0x44>
 8002e86:	2e47      	cmp	r6, #71	; 0x47
 8002e88:	d03c      	beq.n	8002f04 <print_e+0xe4>
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2530      	movs	r5, #48	; 0x30
 8002e8e:	1a62      	subs	r2, r4, r1
 8002e90:	441a      	add	r2, r3
 8002e92:	2a00      	cmp	r2, #0
 8002e94:	dc33      	bgt.n	8002efe <print_e+0xde>
 8002e96:	2c00      	cmp	r4, #0
 8002e98:	bfa8      	it	ge
 8002e9a:	191b      	addge	r3, r3, r4
 8002e9c:	1e41      	subs	r1, r0, #1
 8002e9e:	2900      	cmp	r1, #0
 8002ea0:	bfb8      	it	lt
 8002ea2:	f1c0 0001 	rsblt	r0, r0, #1
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	9105      	str	r1, [sp, #20]
 8002eaa:	bfac      	ite	ge
 8002eac:	202b      	movge	r0, #43	; 0x2b
 8002eae:	9005      	strlt	r0, [sp, #20]
 8002eb0:	f802 6b02 	strb.w	r6, [r2], #2
 8002eb4:	bfa8      	it	ge
 8002eb6:	7058      	strbge	r0, [r3, #1]
 8002eb8:	9805      	ldr	r0, [sp, #20]
 8002eba:	bfbc      	itt	lt
 8002ebc:	242d      	movlt	r4, #45	; 0x2d
 8002ebe:	705c      	strblt	r4, [r3, #1]
 8002ec0:	2863      	cmp	r0, #99	; 0x63
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	dd0b      	ble.n	8002ede <print_e+0xbe>
 8002ec6:	2364      	movs	r3, #100	; 0x64
 8002ec8:	fb90 f3f3 	sdiv	r3, r0, r3
 8002ecc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002ed0:	7011      	strb	r1, [r2, #0]
 8002ed2:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8002ed6:	fb01 0303 	mla	r3, r1, r3, r0
 8002eda:	9305      	str	r3, [sp, #20]
 8002edc:	1c51      	adds	r1, r2, #1
 8002ede:	9a05      	ldr	r2, [sp, #20]
 8002ee0:	230a      	movs	r3, #10
 8002ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ee6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002eea:	7008      	strb	r0, [r1, #0]
 8002eec:	f06f 0009 	mvn.w	r0, #9
 8002ef0:	fb00 2303 	mla	r3, r0, r3, r2
 8002ef4:	3330      	adds	r3, #48	; 0x30
 8002ef6:	704b      	strb	r3, [r1, #1]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	708b      	strb	r3, [r1, #2]
 8002efc:	e7ab      	b.n	8002e56 <print_e+0x36>
 8002efe:	f801 5b01 	strb.w	r5, [r1], #1
 8002f02:	e7c4      	b.n	8002e8e <print_e+0x6e>
 8002f04:	2645      	movs	r6, #69	; 0x45
 8002f06:	e7c9      	b.n	8002e9c <print_e+0x7c>

08002f08 <_gcvt>:
 8002f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0c:	ec55 4b10 	vmov	r4, r5, d0
 8002f10:	b088      	sub	sp, #32
 8002f12:	4681      	mov	r9, r0
 8002f14:	4688      	mov	r8, r1
 8002f16:	4616      	mov	r6, r2
 8002f18:	469a      	mov	sl, r3
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	ee10 0a10 	vmov	r0, s0
 8002f22:	4629      	mov	r1, r5
 8002f24:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002f26:	f7fd fd85 	bl	8000a34 <__aeabi_dcmplt>
 8002f2a:	b110      	cbz	r0, 8002f32 <_gcvt+0x2a>
 8002f2c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002f30:	461d      	mov	r5, r3
 8002f32:	2200      	movs	r2, #0
 8002f34:	2300      	movs	r3, #0
 8002f36:	4620      	mov	r0, r4
 8002f38:	4629      	mov	r1, r5
 8002f3a:	f7fd fd71 	bl	8000a20 <__aeabi_dcmpeq>
 8002f3e:	b138      	cbz	r0, 8002f50 <_gcvt+0x48>
 8002f40:	2330      	movs	r3, #48	; 0x30
 8002f42:	7033      	strb	r3, [r6, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	7073      	strb	r3, [r6, #1]
 8002f48:	4630      	mov	r0, r6
 8002f4a:	b008      	add	sp, #32
 8002f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f50:	a34e      	add	r3, pc, #312	; (adr r3, 800308c <_gcvt+0x184>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	4620      	mov	r0, r4
 8002f58:	4629      	mov	r1, r5
 8002f5a:	f7fd fd75 	bl	8000a48 <__aeabi_dcmple>
 8002f5e:	b160      	cbz	r0, 8002f7a <_gcvt+0x72>
 8002f60:	f108 33ff 	add.w	r3, r8, #4294967295
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	9702      	str	r7, [sp, #8]
 8002f68:	f8cd a004 	str.w	sl, [sp, #4]
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	462b      	mov	r3, r5
 8002f70:	4631      	mov	r1, r6
 8002f72:	4648      	mov	r0, r9
 8002f74:	f7ff ff54 	bl	8002e20 <print_e>
 8002f78:	e7e6      	b.n	8002f48 <_gcvt+0x40>
 8002f7a:	4640      	mov	r0, r8
 8002f7c:	f000 fb5a 	bl	8003634 <_mprec_log10>
 8002f80:	4620      	mov	r0, r4
 8002f82:	ec53 2b10 	vmov	r2, r3, d0
 8002f86:	4629      	mov	r1, r5
 8002f88:	f7fd fd68 	bl	8000a5c <__aeabi_dcmpge>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d1e7      	bne.n	8002f60 <_gcvt+0x58>
 8002f90:	2200      	movs	r2, #0
 8002f92:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <_gcvt+0x180>)
 8002f94:	4620      	mov	r0, r4
 8002f96:	4629      	mov	r1, r5
 8002f98:	f7fd fd4c 	bl	8000a34 <__aeabi_dcmplt>
 8002f9c:	aa07      	add	r2, sp, #28
 8002f9e:	ab06      	add	r3, sp, #24
 8002fa0:	9201      	str	r2, [sp, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	ab05      	add	r3, sp, #20
 8002fa8:	b1e0      	cbz	r0, 8002fe4 <_gcvt+0xdc>
 8002faa:	2103      	movs	r1, #3
 8002fac:	ec45 4b10 	vmov	d0, r4, r5
 8002fb0:	4648      	mov	r0, r9
 8002fb2:	f000 fc6d 	bl	8003890 <_dtoa_r>
 8002fb6:	9a05      	ldr	r2, [sp, #20]
 8002fb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d013      	beq.n	8002fe8 <_gcvt+0xe0>
 8002fc0:	4633      	mov	r3, r6
 8002fc2:	7801      	ldrb	r1, [r0, #0]
 8002fc4:	9d05      	ldr	r5, [sp, #20]
 8002fc6:	eba8 0203 	sub.w	r2, r8, r3
 8002fca:	4604      	mov	r4, r0
 8002fcc:	4432      	add	r2, r6
 8002fce:	3001      	adds	r0, #1
 8002fd0:	b9a1      	cbnz	r1, 8002ffc <_gcvt+0xf4>
 8002fd2:	1aad      	subs	r5, r5, r2
 8002fd4:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002fd8:	18a8      	adds	r0, r5, r2
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	dc37      	bgt.n	800304e <_gcvt+0x146>
 8002fde:	b179      	cbz	r1, 8003000 <_gcvt+0xf8>
 8002fe0:	9005      	str	r0, [sp, #20]
 8002fe2:	e00d      	b.n	8003000 <_gcvt+0xf8>
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	e7e1      	b.n	8002fac <_gcvt+0xa4>
 8002fe8:	4601      	mov	r1, r0
 8002fea:	4630      	mov	r0, r6
 8002fec:	f000 fbbc 	bl	8003768 <strcpy>
 8002ff0:	e7aa      	b.n	8002f48 <_gcvt+0x40>
 8002ff2:	3d01      	subs	r5, #1
 8002ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff8:	9505      	str	r5, [sp, #20]
 8002ffa:	e7e2      	b.n	8002fc2 <_gcvt+0xba>
 8002ffc:	2d00      	cmp	r5, #0
 8002ffe:	dcf8      	bgt.n	8002ff2 <_gcvt+0xea>
 8003000:	b90f      	cbnz	r7, 8003006 <_gcvt+0xfe>
 8003002:	7821      	ldrb	r1, [r4, #0]
 8003004:	b301      	cbz	r1, 8003048 <_gcvt+0x140>
 8003006:	429e      	cmp	r6, r3
 8003008:	bf02      	ittt	eq
 800300a:	1c73      	addeq	r3, r6, #1
 800300c:	2130      	moveq	r1, #48	; 0x30
 800300e:	7031      	strbeq	r1, [r6, #0]
 8003010:	212e      	movs	r1, #46	; 0x2e
 8003012:	7019      	strb	r1, [r3, #0]
 8003014:	9905      	ldr	r1, [sp, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	2000      	movs	r0, #0
 800301a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800301e:	2900      	cmp	r1, #0
 8003020:	460d      	mov	r5, r1
 8003022:	db20      	blt.n	8003066 <_gcvt+0x15e>
 8003024:	b100      	cbz	r0, 8003028 <_gcvt+0x120>
 8003026:	9105      	str	r1, [sp, #20]
 8003028:	3c01      	subs	r4, #1
 800302a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800302e:	b109      	cbz	r1, 8003034 <_gcvt+0x12c>
 8003030:	2a00      	cmp	r2, #0
 8003032:	dc20      	bgt.n	8003076 <_gcvt+0x16e>
 8003034:	b147      	cbz	r7, 8003048 <_gcvt+0x140>
 8003036:	4618      	mov	r0, r3
 8003038:	2430      	movs	r4, #48	; 0x30
 800303a:	1a11      	subs	r1, r2, r0
 800303c:	4419      	add	r1, r3
 800303e:	2900      	cmp	r1, #0
 8003040:	dc1d      	bgt.n	800307e <_gcvt+0x176>
 8003042:	2a00      	cmp	r2, #0
 8003044:	bfa8      	it	ge
 8003046:	189b      	addge	r3, r3, r2
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e77c      	b.n	8002f48 <_gcvt+0x40>
 800304e:	2a00      	cmp	r2, #0
 8003050:	ddc5      	ble.n	8002fde <_gcvt+0xd6>
 8003052:	f803 eb01 	strb.w	lr, [r3], #1
 8003056:	3a01      	subs	r2, #1
 8003058:	2101      	movs	r1, #1
 800305a:	e7bd      	b.n	8002fd8 <_gcvt+0xd0>
 800305c:	f803 eb01 	strb.w	lr, [r3], #1
 8003060:	3a01      	subs	r2, #1
 8003062:	2001      	movs	r0, #1
 8003064:	e7db      	b.n	800301e <_gcvt+0x116>
 8003066:	2a00      	cmp	r2, #0
 8003068:	f101 0101 	add.w	r1, r1, #1
 800306c:	dcf6      	bgt.n	800305c <_gcvt+0x154>
 800306e:	2800      	cmp	r0, #0
 8003070:	d0da      	beq.n	8003028 <_gcvt+0x120>
 8003072:	9505      	str	r5, [sp, #20]
 8003074:	e7d8      	b.n	8003028 <_gcvt+0x120>
 8003076:	f803 1b01 	strb.w	r1, [r3], #1
 800307a:	3a01      	subs	r2, #1
 800307c:	e7d5      	b.n	800302a <_gcvt+0x122>
 800307e:	f800 4b01 	strb.w	r4, [r0], #1
 8003082:	e7da      	b.n	800303a <_gcvt+0x132>
 8003084:	f3af 8000 	nop.w
 8003088:	3ff00000 	.word	0x3ff00000
 800308c:	eb1c432d 	.word	0xeb1c432d
 8003090:	3f1a36e2 	.word	0x3f1a36e2

08003094 <_Balloc>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003098:	4604      	mov	r4, r0
 800309a:	460e      	mov	r6, r1
 800309c:	b93d      	cbnz	r5, 80030ae <_Balloc+0x1a>
 800309e:	2010      	movs	r0, #16
 80030a0:	f001 f9c4 	bl	800442c <malloc>
 80030a4:	6260      	str	r0, [r4, #36]	; 0x24
 80030a6:	6045      	str	r5, [r0, #4]
 80030a8:	6085      	str	r5, [r0, #8]
 80030aa:	6005      	str	r5, [r0, #0]
 80030ac:	60c5      	str	r5, [r0, #12]
 80030ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80030b0:	68eb      	ldr	r3, [r5, #12]
 80030b2:	b183      	cbz	r3, 80030d6 <_Balloc+0x42>
 80030b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80030bc:	b9b8      	cbnz	r0, 80030ee <_Balloc+0x5a>
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f506 	lsl.w	r5, r1, r6
 80030c4:	1d6a      	adds	r2, r5, #5
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	4620      	mov	r0, r4
 80030ca:	f000 fad1 	bl	8003670 <_calloc_r>
 80030ce:	b160      	cbz	r0, 80030ea <_Balloc+0x56>
 80030d0:	6046      	str	r6, [r0, #4]
 80030d2:	6085      	str	r5, [r0, #8]
 80030d4:	e00e      	b.n	80030f4 <_Balloc+0x60>
 80030d6:	2221      	movs	r2, #33	; 0x21
 80030d8:	2104      	movs	r1, #4
 80030da:	4620      	mov	r0, r4
 80030dc:	f000 fac8 	bl	8003670 <_calloc_r>
 80030e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030e2:	60e8      	str	r0, [r5, #12]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e4      	bne.n	80030b4 <_Balloc+0x20>
 80030ea:	2000      	movs	r0, #0
 80030ec:	bd70      	pop	{r4, r5, r6, pc}
 80030ee:	6802      	ldr	r2, [r0, #0]
 80030f0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80030f4:	2300      	movs	r3, #0
 80030f6:	6103      	str	r3, [r0, #16]
 80030f8:	60c3      	str	r3, [r0, #12]
 80030fa:	bd70      	pop	{r4, r5, r6, pc}

080030fc <_Bfree>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003100:	4606      	mov	r6, r0
 8003102:	460d      	mov	r5, r1
 8003104:	b93c      	cbnz	r4, 8003116 <_Bfree+0x1a>
 8003106:	2010      	movs	r0, #16
 8003108:	f001 f990 	bl	800442c <malloc>
 800310c:	6270      	str	r0, [r6, #36]	; 0x24
 800310e:	6044      	str	r4, [r0, #4]
 8003110:	6084      	str	r4, [r0, #8]
 8003112:	6004      	str	r4, [r0, #0]
 8003114:	60c4      	str	r4, [r0, #12]
 8003116:	b13d      	cbz	r5, 8003128 <_Bfree+0x2c>
 8003118:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800311a:	686a      	ldr	r2, [r5, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003122:	6029      	str	r1, [r5, #0]
 8003124:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003128:	bd70      	pop	{r4, r5, r6, pc}

0800312a <__multadd>:
 800312a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800312e:	690d      	ldr	r5, [r1, #16]
 8003130:	461f      	mov	r7, r3
 8003132:	4606      	mov	r6, r0
 8003134:	460c      	mov	r4, r1
 8003136:	f101 0e14 	add.w	lr, r1, #20
 800313a:	2300      	movs	r3, #0
 800313c:	f8de 0000 	ldr.w	r0, [lr]
 8003140:	b281      	uxth	r1, r0
 8003142:	fb02 7101 	mla	r1, r2, r1, r7
 8003146:	0c0f      	lsrs	r7, r1, #16
 8003148:	0c00      	lsrs	r0, r0, #16
 800314a:	fb02 7000 	mla	r0, r2, r0, r7
 800314e:	b289      	uxth	r1, r1
 8003150:	3301      	adds	r3, #1
 8003152:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003156:	429d      	cmp	r5, r3
 8003158:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800315c:	f84e 1b04 	str.w	r1, [lr], #4
 8003160:	dcec      	bgt.n	800313c <__multadd+0x12>
 8003162:	b1d7      	cbz	r7, 800319a <__multadd+0x70>
 8003164:	68a3      	ldr	r3, [r4, #8]
 8003166:	429d      	cmp	r5, r3
 8003168:	db12      	blt.n	8003190 <__multadd+0x66>
 800316a:	6861      	ldr	r1, [r4, #4]
 800316c:	4630      	mov	r0, r6
 800316e:	3101      	adds	r1, #1
 8003170:	f7ff ff90 	bl	8003094 <_Balloc>
 8003174:	6922      	ldr	r2, [r4, #16]
 8003176:	3202      	adds	r2, #2
 8003178:	f104 010c 	add.w	r1, r4, #12
 800317c:	4680      	mov	r8, r0
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	300c      	adds	r0, #12
 8003182:	f001 f95b 	bl	800443c <memcpy>
 8003186:	4621      	mov	r1, r4
 8003188:	4630      	mov	r0, r6
 800318a:	f7ff ffb7 	bl	80030fc <_Bfree>
 800318e:	4644      	mov	r4, r8
 8003190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003194:	3501      	adds	r5, #1
 8003196:	615f      	str	r7, [r3, #20]
 8003198:	6125      	str	r5, [r4, #16]
 800319a:	4620      	mov	r0, r4
 800319c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031a0 <__hi0bits>:
 80031a0:	0c02      	lsrs	r2, r0, #16
 80031a2:	0412      	lsls	r2, r2, #16
 80031a4:	4603      	mov	r3, r0
 80031a6:	b9b2      	cbnz	r2, 80031d6 <__hi0bits+0x36>
 80031a8:	0403      	lsls	r3, r0, #16
 80031aa:	2010      	movs	r0, #16
 80031ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80031b0:	bf04      	itt	eq
 80031b2:	021b      	lsleq	r3, r3, #8
 80031b4:	3008      	addeq	r0, #8
 80031b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80031ba:	bf04      	itt	eq
 80031bc:	011b      	lsleq	r3, r3, #4
 80031be:	3004      	addeq	r0, #4
 80031c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80031c4:	bf04      	itt	eq
 80031c6:	009b      	lsleq	r3, r3, #2
 80031c8:	3002      	addeq	r0, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	db06      	blt.n	80031dc <__hi0bits+0x3c>
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	d503      	bpl.n	80031da <__hi0bits+0x3a>
 80031d2:	3001      	adds	r0, #1
 80031d4:	4770      	bx	lr
 80031d6:	2000      	movs	r0, #0
 80031d8:	e7e8      	b.n	80031ac <__hi0bits+0xc>
 80031da:	2020      	movs	r0, #32
 80031dc:	4770      	bx	lr

080031de <__lo0bits>:
 80031de:	6803      	ldr	r3, [r0, #0]
 80031e0:	f013 0207 	ands.w	r2, r3, #7
 80031e4:	4601      	mov	r1, r0
 80031e6:	d00b      	beq.n	8003200 <__lo0bits+0x22>
 80031e8:	07da      	lsls	r2, r3, #31
 80031ea:	d423      	bmi.n	8003234 <__lo0bits+0x56>
 80031ec:	0798      	lsls	r0, r3, #30
 80031ee:	bf49      	itett	mi
 80031f0:	085b      	lsrmi	r3, r3, #1
 80031f2:	089b      	lsrpl	r3, r3, #2
 80031f4:	2001      	movmi	r0, #1
 80031f6:	600b      	strmi	r3, [r1, #0]
 80031f8:	bf5c      	itt	pl
 80031fa:	600b      	strpl	r3, [r1, #0]
 80031fc:	2002      	movpl	r0, #2
 80031fe:	4770      	bx	lr
 8003200:	b298      	uxth	r0, r3
 8003202:	b9a8      	cbnz	r0, 8003230 <__lo0bits+0x52>
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	2010      	movs	r0, #16
 8003208:	f013 0fff 	tst.w	r3, #255	; 0xff
 800320c:	bf04      	itt	eq
 800320e:	0a1b      	lsreq	r3, r3, #8
 8003210:	3008      	addeq	r0, #8
 8003212:	071a      	lsls	r2, r3, #28
 8003214:	bf04      	itt	eq
 8003216:	091b      	lsreq	r3, r3, #4
 8003218:	3004      	addeq	r0, #4
 800321a:	079a      	lsls	r2, r3, #30
 800321c:	bf04      	itt	eq
 800321e:	089b      	lsreq	r3, r3, #2
 8003220:	3002      	addeq	r0, #2
 8003222:	07da      	lsls	r2, r3, #31
 8003224:	d402      	bmi.n	800322c <__lo0bits+0x4e>
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	d006      	beq.n	8003238 <__lo0bits+0x5a>
 800322a:	3001      	adds	r0, #1
 800322c:	600b      	str	r3, [r1, #0]
 800322e:	4770      	bx	lr
 8003230:	4610      	mov	r0, r2
 8003232:	e7e9      	b.n	8003208 <__lo0bits+0x2a>
 8003234:	2000      	movs	r0, #0
 8003236:	4770      	bx	lr
 8003238:	2020      	movs	r0, #32
 800323a:	4770      	bx	lr

0800323c <__i2b>:
 800323c:	b510      	push	{r4, lr}
 800323e:	460c      	mov	r4, r1
 8003240:	2101      	movs	r1, #1
 8003242:	f7ff ff27 	bl	8003094 <_Balloc>
 8003246:	2201      	movs	r2, #1
 8003248:	6144      	str	r4, [r0, #20]
 800324a:	6102      	str	r2, [r0, #16]
 800324c:	bd10      	pop	{r4, pc}

0800324e <__multiply>:
 800324e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003252:	4614      	mov	r4, r2
 8003254:	690a      	ldr	r2, [r1, #16]
 8003256:	6923      	ldr	r3, [r4, #16]
 8003258:	429a      	cmp	r2, r3
 800325a:	bfb8      	it	lt
 800325c:	460b      	movlt	r3, r1
 800325e:	4689      	mov	r9, r1
 8003260:	bfbc      	itt	lt
 8003262:	46a1      	movlt	r9, r4
 8003264:	461c      	movlt	r4, r3
 8003266:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800326a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800326e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003272:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003276:	eb07 060a 	add.w	r6, r7, sl
 800327a:	429e      	cmp	r6, r3
 800327c:	bfc8      	it	gt
 800327e:	3101      	addgt	r1, #1
 8003280:	f7ff ff08 	bl	8003094 <_Balloc>
 8003284:	f100 0514 	add.w	r5, r0, #20
 8003288:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800328c:	462b      	mov	r3, r5
 800328e:	2200      	movs	r2, #0
 8003290:	4543      	cmp	r3, r8
 8003292:	d316      	bcc.n	80032c2 <__multiply+0x74>
 8003294:	f104 0214 	add.w	r2, r4, #20
 8003298:	f109 0114 	add.w	r1, r9, #20
 800329c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80032a0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	9c01      	ldr	r4, [sp, #4]
 80032a8:	4294      	cmp	r4, r2
 80032aa:	4613      	mov	r3, r2
 80032ac:	d80c      	bhi.n	80032c8 <__multiply+0x7a>
 80032ae:	2e00      	cmp	r6, #0
 80032b0:	dd03      	ble.n	80032ba <__multiply+0x6c>
 80032b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d054      	beq.n	8003364 <__multiply+0x116>
 80032ba:	6106      	str	r6, [r0, #16]
 80032bc:	b003      	add	sp, #12
 80032be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c2:	f843 2b04 	str.w	r2, [r3], #4
 80032c6:	e7e3      	b.n	8003290 <__multiply+0x42>
 80032c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80032cc:	3204      	adds	r2, #4
 80032ce:	f1ba 0f00 	cmp.w	sl, #0
 80032d2:	d020      	beq.n	8003316 <__multiply+0xc8>
 80032d4:	46ae      	mov	lr, r5
 80032d6:	4689      	mov	r9, r1
 80032d8:	f04f 0c00 	mov.w	ip, #0
 80032dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80032e0:	f8be b000 	ldrh.w	fp, [lr]
 80032e4:	b2a3      	uxth	r3, r4
 80032e6:	fb0a b303 	mla	r3, sl, r3, fp
 80032ea:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80032ee:	f8de 4000 	ldr.w	r4, [lr]
 80032f2:	4463      	add	r3, ip
 80032f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80032f8:	fb0a c40b 	mla	r4, sl, fp, ip
 80032fc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003300:	b29b      	uxth	r3, r3
 8003302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003306:	454f      	cmp	r7, r9
 8003308:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800330c:	f84e 3b04 	str.w	r3, [lr], #4
 8003310:	d8e4      	bhi.n	80032dc <__multiply+0x8e>
 8003312:	f8ce c000 	str.w	ip, [lr]
 8003316:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800331a:	f1b9 0f00 	cmp.w	r9, #0
 800331e:	d01f      	beq.n	8003360 <__multiply+0x112>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	46ae      	mov	lr, r5
 8003324:	468c      	mov	ip, r1
 8003326:	f04f 0a00 	mov.w	sl, #0
 800332a:	f8bc 4000 	ldrh.w	r4, [ip]
 800332e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003332:	fb09 b404 	mla	r4, r9, r4, fp
 8003336:	44a2      	add	sl, r4
 8003338:	b29b      	uxth	r3, r3
 800333a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800333e:	f84e 3b04 	str.w	r3, [lr], #4
 8003342:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003346:	f8be 4000 	ldrh.w	r4, [lr]
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	fb09 4303 	mla	r3, r9, r3, r4
 8003350:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003354:	4567      	cmp	r7, ip
 8003356:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800335a:	d8e6      	bhi.n	800332a <__multiply+0xdc>
 800335c:	f8ce 3000 	str.w	r3, [lr]
 8003360:	3504      	adds	r5, #4
 8003362:	e7a0      	b.n	80032a6 <__multiply+0x58>
 8003364:	3e01      	subs	r6, #1
 8003366:	e7a2      	b.n	80032ae <__multiply+0x60>

08003368 <__pow5mult>:
 8003368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800336c:	4615      	mov	r5, r2
 800336e:	f012 0203 	ands.w	r2, r2, #3
 8003372:	4606      	mov	r6, r0
 8003374:	460f      	mov	r7, r1
 8003376:	d007      	beq.n	8003388 <__pow5mult+0x20>
 8003378:	3a01      	subs	r2, #1
 800337a:	4c21      	ldr	r4, [pc, #132]	; (8003400 <__pow5mult+0x98>)
 800337c:	2300      	movs	r3, #0
 800337e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003382:	f7ff fed2 	bl	800312a <__multadd>
 8003386:	4607      	mov	r7, r0
 8003388:	10ad      	asrs	r5, r5, #2
 800338a:	d035      	beq.n	80033f8 <__pow5mult+0x90>
 800338c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800338e:	b93c      	cbnz	r4, 80033a0 <__pow5mult+0x38>
 8003390:	2010      	movs	r0, #16
 8003392:	f001 f84b 	bl	800442c <malloc>
 8003396:	6270      	str	r0, [r6, #36]	; 0x24
 8003398:	6044      	str	r4, [r0, #4]
 800339a:	6084      	str	r4, [r0, #8]
 800339c:	6004      	str	r4, [r0, #0]
 800339e:	60c4      	str	r4, [r0, #12]
 80033a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80033a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80033a8:	b94c      	cbnz	r4, 80033be <__pow5mult+0x56>
 80033aa:	f240 2171 	movw	r1, #625	; 0x271
 80033ae:	4630      	mov	r0, r6
 80033b0:	f7ff ff44 	bl	800323c <__i2b>
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80033ba:	4604      	mov	r4, r0
 80033bc:	6003      	str	r3, [r0, #0]
 80033be:	f04f 0800 	mov.w	r8, #0
 80033c2:	07eb      	lsls	r3, r5, #31
 80033c4:	d50a      	bpl.n	80033dc <__pow5mult+0x74>
 80033c6:	4639      	mov	r1, r7
 80033c8:	4622      	mov	r2, r4
 80033ca:	4630      	mov	r0, r6
 80033cc:	f7ff ff3f 	bl	800324e <__multiply>
 80033d0:	4639      	mov	r1, r7
 80033d2:	4681      	mov	r9, r0
 80033d4:	4630      	mov	r0, r6
 80033d6:	f7ff fe91 	bl	80030fc <_Bfree>
 80033da:	464f      	mov	r7, r9
 80033dc:	106d      	asrs	r5, r5, #1
 80033de:	d00b      	beq.n	80033f8 <__pow5mult+0x90>
 80033e0:	6820      	ldr	r0, [r4, #0]
 80033e2:	b938      	cbnz	r0, 80033f4 <__pow5mult+0x8c>
 80033e4:	4622      	mov	r2, r4
 80033e6:	4621      	mov	r1, r4
 80033e8:	4630      	mov	r0, r6
 80033ea:	f7ff ff30 	bl	800324e <__multiply>
 80033ee:	6020      	str	r0, [r4, #0]
 80033f0:	f8c0 8000 	str.w	r8, [r0]
 80033f4:	4604      	mov	r4, r0
 80033f6:	e7e4      	b.n	80033c2 <__pow5mult+0x5a>
 80033f8:	4638      	mov	r0, r7
 80033fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033fe:	bf00      	nop
 8003400:	080045f0 	.word	0x080045f0

08003404 <__lshift>:
 8003404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003408:	460c      	mov	r4, r1
 800340a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800340e:	6923      	ldr	r3, [r4, #16]
 8003410:	6849      	ldr	r1, [r1, #4]
 8003412:	eb0a 0903 	add.w	r9, sl, r3
 8003416:	68a3      	ldr	r3, [r4, #8]
 8003418:	4607      	mov	r7, r0
 800341a:	4616      	mov	r6, r2
 800341c:	f109 0501 	add.w	r5, r9, #1
 8003420:	42ab      	cmp	r3, r5
 8003422:	db31      	blt.n	8003488 <__lshift+0x84>
 8003424:	4638      	mov	r0, r7
 8003426:	f7ff fe35 	bl	8003094 <_Balloc>
 800342a:	2200      	movs	r2, #0
 800342c:	4680      	mov	r8, r0
 800342e:	f100 0314 	add.w	r3, r0, #20
 8003432:	4611      	mov	r1, r2
 8003434:	4552      	cmp	r2, sl
 8003436:	db2a      	blt.n	800348e <__lshift+0x8a>
 8003438:	6920      	ldr	r0, [r4, #16]
 800343a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800343e:	f104 0114 	add.w	r1, r4, #20
 8003442:	f016 021f 	ands.w	r2, r6, #31
 8003446:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800344a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800344e:	d022      	beq.n	8003496 <__lshift+0x92>
 8003450:	f1c2 0c20 	rsb	ip, r2, #32
 8003454:	2000      	movs	r0, #0
 8003456:	680e      	ldr	r6, [r1, #0]
 8003458:	4096      	lsls	r6, r2
 800345a:	4330      	orrs	r0, r6
 800345c:	f843 0b04 	str.w	r0, [r3], #4
 8003460:	f851 0b04 	ldr.w	r0, [r1], #4
 8003464:	458e      	cmp	lr, r1
 8003466:	fa20 f00c 	lsr.w	r0, r0, ip
 800346a:	d8f4      	bhi.n	8003456 <__lshift+0x52>
 800346c:	6018      	str	r0, [r3, #0]
 800346e:	b108      	cbz	r0, 8003474 <__lshift+0x70>
 8003470:	f109 0502 	add.w	r5, r9, #2
 8003474:	3d01      	subs	r5, #1
 8003476:	4638      	mov	r0, r7
 8003478:	f8c8 5010 	str.w	r5, [r8, #16]
 800347c:	4621      	mov	r1, r4
 800347e:	f7ff fe3d 	bl	80030fc <_Bfree>
 8003482:	4640      	mov	r0, r8
 8003484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003488:	3101      	adds	r1, #1
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	e7c8      	b.n	8003420 <__lshift+0x1c>
 800348e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003492:	3201      	adds	r2, #1
 8003494:	e7ce      	b.n	8003434 <__lshift+0x30>
 8003496:	3b04      	subs	r3, #4
 8003498:	f851 2b04 	ldr.w	r2, [r1], #4
 800349c:	f843 2f04 	str.w	r2, [r3, #4]!
 80034a0:	458e      	cmp	lr, r1
 80034a2:	d8f9      	bhi.n	8003498 <__lshift+0x94>
 80034a4:	e7e6      	b.n	8003474 <__lshift+0x70>

080034a6 <__mcmp>:
 80034a6:	6903      	ldr	r3, [r0, #16]
 80034a8:	690a      	ldr	r2, [r1, #16]
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	b530      	push	{r4, r5, lr}
 80034ae:	d10c      	bne.n	80034ca <__mcmp+0x24>
 80034b0:	0092      	lsls	r2, r2, #2
 80034b2:	3014      	adds	r0, #20
 80034b4:	3114      	adds	r1, #20
 80034b6:	1884      	adds	r4, r0, r2
 80034b8:	4411      	add	r1, r2
 80034ba:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80034be:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80034c2:	4295      	cmp	r5, r2
 80034c4:	d003      	beq.n	80034ce <__mcmp+0x28>
 80034c6:	d305      	bcc.n	80034d4 <__mcmp+0x2e>
 80034c8:	2301      	movs	r3, #1
 80034ca:	4618      	mov	r0, r3
 80034cc:	bd30      	pop	{r4, r5, pc}
 80034ce:	42a0      	cmp	r0, r4
 80034d0:	d3f3      	bcc.n	80034ba <__mcmp+0x14>
 80034d2:	e7fa      	b.n	80034ca <__mcmp+0x24>
 80034d4:	f04f 33ff 	mov.w	r3, #4294967295
 80034d8:	e7f7      	b.n	80034ca <__mcmp+0x24>

080034da <__mdiff>:
 80034da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034de:	460d      	mov	r5, r1
 80034e0:	4607      	mov	r7, r0
 80034e2:	4611      	mov	r1, r2
 80034e4:	4628      	mov	r0, r5
 80034e6:	4614      	mov	r4, r2
 80034e8:	f7ff ffdd 	bl	80034a6 <__mcmp>
 80034ec:	1e06      	subs	r6, r0, #0
 80034ee:	d108      	bne.n	8003502 <__mdiff+0x28>
 80034f0:	4631      	mov	r1, r6
 80034f2:	4638      	mov	r0, r7
 80034f4:	f7ff fdce 	bl	8003094 <_Balloc>
 80034f8:	2301      	movs	r3, #1
 80034fa:	6103      	str	r3, [r0, #16]
 80034fc:	6146      	str	r6, [r0, #20]
 80034fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003502:	bfa4      	itt	ge
 8003504:	4623      	movge	r3, r4
 8003506:	462c      	movge	r4, r5
 8003508:	4638      	mov	r0, r7
 800350a:	6861      	ldr	r1, [r4, #4]
 800350c:	bfa6      	itte	ge
 800350e:	461d      	movge	r5, r3
 8003510:	2600      	movge	r6, #0
 8003512:	2601      	movlt	r6, #1
 8003514:	f7ff fdbe 	bl	8003094 <_Balloc>
 8003518:	692b      	ldr	r3, [r5, #16]
 800351a:	60c6      	str	r6, [r0, #12]
 800351c:	6926      	ldr	r6, [r4, #16]
 800351e:	f105 0914 	add.w	r9, r5, #20
 8003522:	f104 0214 	add.w	r2, r4, #20
 8003526:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800352a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800352e:	f100 0514 	add.w	r5, r0, #20
 8003532:	f04f 0c00 	mov.w	ip, #0
 8003536:	f852 ab04 	ldr.w	sl, [r2], #4
 800353a:	f859 4b04 	ldr.w	r4, [r9], #4
 800353e:	fa1c f18a 	uxtah	r1, ip, sl
 8003542:	b2a3      	uxth	r3, r4
 8003544:	1ac9      	subs	r1, r1, r3
 8003546:	0c23      	lsrs	r3, r4, #16
 8003548:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800354c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003550:	b289      	uxth	r1, r1
 8003552:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003556:	45c8      	cmp	r8, r9
 8003558:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800355c:	4696      	mov	lr, r2
 800355e:	f845 3b04 	str.w	r3, [r5], #4
 8003562:	d8e8      	bhi.n	8003536 <__mdiff+0x5c>
 8003564:	45be      	cmp	lr, r7
 8003566:	d305      	bcc.n	8003574 <__mdiff+0x9a>
 8003568:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800356c:	b18b      	cbz	r3, 8003592 <__mdiff+0xb8>
 800356e:	6106      	str	r6, [r0, #16]
 8003570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003574:	f85e 1b04 	ldr.w	r1, [lr], #4
 8003578:	fa1c f381 	uxtah	r3, ip, r1
 800357c:	141a      	asrs	r2, r3, #16
 800357e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003582:	b29b      	uxth	r3, r3
 8003584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003588:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800358c:	f845 3b04 	str.w	r3, [r5], #4
 8003590:	e7e8      	b.n	8003564 <__mdiff+0x8a>
 8003592:	3e01      	subs	r6, #1
 8003594:	e7e8      	b.n	8003568 <__mdiff+0x8e>

08003596 <__d2b>:
 8003596:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800359a:	460e      	mov	r6, r1
 800359c:	2101      	movs	r1, #1
 800359e:	ec59 8b10 	vmov	r8, r9, d0
 80035a2:	4615      	mov	r5, r2
 80035a4:	f7ff fd76 	bl	8003094 <_Balloc>
 80035a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80035ac:	4607      	mov	r7, r0
 80035ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80035b2:	bb34      	cbnz	r4, 8003602 <__d2b+0x6c>
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	f1b8 0f00 	cmp.w	r8, #0
 80035ba:	d027      	beq.n	800360c <__d2b+0x76>
 80035bc:	a802      	add	r0, sp, #8
 80035be:	f840 8d08 	str.w	r8, [r0, #-8]!
 80035c2:	f7ff fe0c 	bl	80031de <__lo0bits>
 80035c6:	9900      	ldr	r1, [sp, #0]
 80035c8:	b1f0      	cbz	r0, 8003608 <__d2b+0x72>
 80035ca:	9a01      	ldr	r2, [sp, #4]
 80035cc:	f1c0 0320 	rsb	r3, r0, #32
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	430b      	orrs	r3, r1
 80035d6:	40c2      	lsrs	r2, r0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	9201      	str	r2, [sp, #4]
 80035dc:	9b01      	ldr	r3, [sp, #4]
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2102      	movne	r1, #2
 80035e6:	2101      	moveq	r1, #1
 80035e8:	6139      	str	r1, [r7, #16]
 80035ea:	b1c4      	cbz	r4, 800361e <__d2b+0x88>
 80035ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80035f0:	4404      	add	r4, r0
 80035f2:	6034      	str	r4, [r6, #0]
 80035f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80035f8:	6028      	str	r0, [r5, #0]
 80035fa:	4638      	mov	r0, r7
 80035fc:	b003      	add	sp, #12
 80035fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003606:	e7d5      	b.n	80035b4 <__d2b+0x1e>
 8003608:	6179      	str	r1, [r7, #20]
 800360a:	e7e7      	b.n	80035dc <__d2b+0x46>
 800360c:	a801      	add	r0, sp, #4
 800360e:	f7ff fde6 	bl	80031de <__lo0bits>
 8003612:	9b01      	ldr	r3, [sp, #4]
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	2101      	movs	r1, #1
 8003618:	6139      	str	r1, [r7, #16]
 800361a:	3020      	adds	r0, #32
 800361c:	e7e5      	b.n	80035ea <__d2b+0x54>
 800361e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003622:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003626:	6030      	str	r0, [r6, #0]
 8003628:	6918      	ldr	r0, [r3, #16]
 800362a:	f7ff fdb9 	bl	80031a0 <__hi0bits>
 800362e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003632:	e7e1      	b.n	80035f8 <__d2b+0x62>

08003634 <_mprec_log10>:
 8003634:	2817      	cmp	r0, #23
 8003636:	b5d0      	push	{r4, r6, r7, lr}
 8003638:	4604      	mov	r4, r0
 800363a:	dc07      	bgt.n	800364c <_mprec_log10+0x18>
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <_mprec_log10+0x30>)
 800363e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8003642:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003646:	ec41 0b10 	vmov	d0, r0, r1
 800364a:	bdd0      	pop	{r4, r6, r7, pc}
 800364c:	4906      	ldr	r1, [pc, #24]	; (8003668 <_mprec_log10+0x34>)
 800364e:	4f07      	ldr	r7, [pc, #28]	; (800366c <_mprec_log10+0x38>)
 8003650:	2000      	movs	r0, #0
 8003652:	2600      	movs	r6, #0
 8003654:	4632      	mov	r2, r6
 8003656:	463b      	mov	r3, r7
 8003658:	f7fc ff7a 	bl	8000550 <__aeabi_dmul>
 800365c:	3c01      	subs	r4, #1
 800365e:	d1f9      	bne.n	8003654 <_mprec_log10+0x20>
 8003660:	e7f1      	b.n	8003646 <_mprec_log10+0x12>
 8003662:	bf00      	nop
 8003664:	08004528 	.word	0x08004528
 8003668:	3ff00000 	.word	0x3ff00000
 800366c:	40240000 	.word	0x40240000

08003670 <_calloc_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	fb02 f401 	mul.w	r4, r2, r1
 8003676:	4621      	mov	r1, r4
 8003678:	f000 f808 	bl	800368c <_malloc_r>
 800367c:	4605      	mov	r5, r0
 800367e:	b118      	cbz	r0, 8003688 <_calloc_r+0x18>
 8003680:	4622      	mov	r2, r4
 8003682:	2100      	movs	r1, #0
 8003684:	f000 fee5 	bl	8004452 <memset>
 8003688:	4628      	mov	r0, r5
 800368a:	bd38      	pop	{r3, r4, r5, pc}

0800368c <_malloc_r>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	1ccd      	adds	r5, r1, #3
 8003690:	f025 0503 	bic.w	r5, r5, #3
 8003694:	3508      	adds	r5, #8
 8003696:	2d0c      	cmp	r5, #12
 8003698:	bf38      	it	cc
 800369a:	250c      	movcc	r5, #12
 800369c:	2d00      	cmp	r5, #0
 800369e:	4606      	mov	r6, r0
 80036a0:	db01      	blt.n	80036a6 <_malloc_r+0x1a>
 80036a2:	42a9      	cmp	r1, r5
 80036a4:	d903      	bls.n	80036ae <_malloc_r+0x22>
 80036a6:	230c      	movs	r3, #12
 80036a8:	6033      	str	r3, [r6, #0]
 80036aa:	2000      	movs	r0, #0
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
 80036ae:	f000 fed8 	bl	8004462 <__malloc_lock>
 80036b2:	4a23      	ldr	r2, [pc, #140]	; (8003740 <_malloc_r+0xb4>)
 80036b4:	6814      	ldr	r4, [r2, #0]
 80036b6:	4621      	mov	r1, r4
 80036b8:	b991      	cbnz	r1, 80036e0 <_malloc_r+0x54>
 80036ba:	4c22      	ldr	r4, [pc, #136]	; (8003744 <_malloc_r+0xb8>)
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	b91b      	cbnz	r3, 80036c8 <_malloc_r+0x3c>
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 f841 	bl	8003748 <_sbrk_r>
 80036c6:	6020      	str	r0, [r4, #0]
 80036c8:	4629      	mov	r1, r5
 80036ca:	4630      	mov	r0, r6
 80036cc:	f000 f83c 	bl	8003748 <_sbrk_r>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	d126      	bne.n	8003722 <_malloc_r+0x96>
 80036d4:	230c      	movs	r3, #12
 80036d6:	6033      	str	r3, [r6, #0]
 80036d8:	4630      	mov	r0, r6
 80036da:	f000 fec3 	bl	8004464 <__malloc_unlock>
 80036de:	e7e4      	b.n	80036aa <_malloc_r+0x1e>
 80036e0:	680b      	ldr	r3, [r1, #0]
 80036e2:	1b5b      	subs	r3, r3, r5
 80036e4:	d41a      	bmi.n	800371c <_malloc_r+0x90>
 80036e6:	2b0b      	cmp	r3, #11
 80036e8:	d90f      	bls.n	800370a <_malloc_r+0x7e>
 80036ea:	600b      	str	r3, [r1, #0]
 80036ec:	50cd      	str	r5, [r1, r3]
 80036ee:	18cc      	adds	r4, r1, r3
 80036f0:	4630      	mov	r0, r6
 80036f2:	f000 feb7 	bl	8004464 <__malloc_unlock>
 80036f6:	f104 000b 	add.w	r0, r4, #11
 80036fa:	1d23      	adds	r3, r4, #4
 80036fc:	f020 0007 	bic.w	r0, r0, #7
 8003700:	1ac3      	subs	r3, r0, r3
 8003702:	d01b      	beq.n	800373c <_malloc_r+0xb0>
 8003704:	425a      	negs	r2, r3
 8003706:	50e2      	str	r2, [r4, r3]
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	428c      	cmp	r4, r1
 800370c:	bf0d      	iteet	eq
 800370e:	6863      	ldreq	r3, [r4, #4]
 8003710:	684b      	ldrne	r3, [r1, #4]
 8003712:	6063      	strne	r3, [r4, #4]
 8003714:	6013      	streq	r3, [r2, #0]
 8003716:	bf18      	it	ne
 8003718:	460c      	movne	r4, r1
 800371a:	e7e9      	b.n	80036f0 <_malloc_r+0x64>
 800371c:	460c      	mov	r4, r1
 800371e:	6849      	ldr	r1, [r1, #4]
 8003720:	e7ca      	b.n	80036b8 <_malloc_r+0x2c>
 8003722:	1cc4      	adds	r4, r0, #3
 8003724:	f024 0403 	bic.w	r4, r4, #3
 8003728:	42a0      	cmp	r0, r4
 800372a:	d005      	beq.n	8003738 <_malloc_r+0xac>
 800372c:	1a21      	subs	r1, r4, r0
 800372e:	4630      	mov	r0, r6
 8003730:	f000 f80a 	bl	8003748 <_sbrk_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d0cd      	beq.n	80036d4 <_malloc_r+0x48>
 8003738:	6025      	str	r5, [r4, #0]
 800373a:	e7d9      	b.n	80036f0 <_malloc_r+0x64>
 800373c:	bd70      	pop	{r4, r5, r6, pc}
 800373e:	bf00      	nop
 8003740:	200000b8 	.word	0x200000b8
 8003744:	200000bc 	.word	0x200000bc

08003748 <_sbrk_r>:
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4c06      	ldr	r4, [pc, #24]	; (8003764 <_sbrk_r+0x1c>)
 800374c:	2300      	movs	r3, #0
 800374e:	4605      	mov	r5, r0
 8003750:	4608      	mov	r0, r1
 8003752:	6023      	str	r3, [r4, #0]
 8003754:	f000 fe88 	bl	8004468 <_sbrk>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d102      	bne.n	8003762 <_sbrk_r+0x1a>
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	b103      	cbz	r3, 8003762 <_sbrk_r+0x1a>
 8003760:	602b      	str	r3, [r5, #0]
 8003762:	bd38      	pop	{r3, r4, r5, pc}
 8003764:	20000234 	.word	0x20000234

08003768 <strcpy>:
 8003768:	4603      	mov	r3, r0
 800376a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800376e:	f803 2b01 	strb.w	r2, [r3], #1
 8003772:	2a00      	cmp	r2, #0
 8003774:	d1f9      	bne.n	800376a <strcpy+0x2>
 8003776:	4770      	bx	lr

08003778 <quorem>:
 8003778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	6903      	ldr	r3, [r0, #16]
 800377e:	690c      	ldr	r4, [r1, #16]
 8003780:	429c      	cmp	r4, r3
 8003782:	4680      	mov	r8, r0
 8003784:	f300 8082 	bgt.w	800388c <quorem+0x114>
 8003788:	3c01      	subs	r4, #1
 800378a:	f101 0714 	add.w	r7, r1, #20
 800378e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003792:	f100 0614 	add.w	r6, r0, #20
 8003796:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800379a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800379e:	eb06 030e 	add.w	r3, r6, lr
 80037a2:	3501      	adds	r5, #1
 80037a4:	eb07 090e 	add.w	r9, r7, lr
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	fbb0 f5f5 	udiv	r5, r0, r5
 80037ae:	b395      	cbz	r5, 8003816 <quorem+0x9e>
 80037b0:	f04f 0a00 	mov.w	sl, #0
 80037b4:	4638      	mov	r0, r7
 80037b6:	46b4      	mov	ip, r6
 80037b8:	46d3      	mov	fp, sl
 80037ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80037be:	b293      	uxth	r3, r2
 80037c0:	fb05 a303 	mla	r3, r5, r3, sl
 80037c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	ebab 0303 	sub.w	r3, fp, r3
 80037ce:	0c12      	lsrs	r2, r2, #16
 80037d0:	f8bc b000 	ldrh.w	fp, [ip]
 80037d4:	fb05 a202 	mla	r2, r5, r2, sl
 80037d8:	fa13 f38b 	uxtah	r3, r3, fp
 80037dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80037e0:	fa1f fb82 	uxth.w	fp, r2
 80037e4:	f8dc 2000 	ldr.w	r2, [ip]
 80037e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80037ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037f6:	4581      	cmp	r9, r0
 80037f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80037fc:	f84c 3b04 	str.w	r3, [ip], #4
 8003800:	d2db      	bcs.n	80037ba <quorem+0x42>
 8003802:	f856 300e 	ldr.w	r3, [r6, lr]
 8003806:	b933      	cbnz	r3, 8003816 <quorem+0x9e>
 8003808:	9b01      	ldr	r3, [sp, #4]
 800380a:	3b04      	subs	r3, #4
 800380c:	429e      	cmp	r6, r3
 800380e:	461a      	mov	r2, r3
 8003810:	d330      	bcc.n	8003874 <quorem+0xfc>
 8003812:	f8c8 4010 	str.w	r4, [r8, #16]
 8003816:	4640      	mov	r0, r8
 8003818:	f7ff fe45 	bl	80034a6 <__mcmp>
 800381c:	2800      	cmp	r0, #0
 800381e:	db25      	blt.n	800386c <quorem+0xf4>
 8003820:	3501      	adds	r5, #1
 8003822:	4630      	mov	r0, r6
 8003824:	f04f 0e00 	mov.w	lr, #0
 8003828:	f857 2b04 	ldr.w	r2, [r7], #4
 800382c:	f8d0 c000 	ldr.w	ip, [r0]
 8003830:	b293      	uxth	r3, r2
 8003832:	ebae 0303 	sub.w	r3, lr, r3
 8003836:	0c12      	lsrs	r2, r2, #16
 8003838:	fa13 f38c 	uxtah	r3, r3, ip
 800383c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003840:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003844:	b29b      	uxth	r3, r3
 8003846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800384a:	45b9      	cmp	r9, r7
 800384c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003850:	f840 3b04 	str.w	r3, [r0], #4
 8003854:	d2e8      	bcs.n	8003828 <quorem+0xb0>
 8003856:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800385a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800385e:	b92a      	cbnz	r2, 800386c <quorem+0xf4>
 8003860:	3b04      	subs	r3, #4
 8003862:	429e      	cmp	r6, r3
 8003864:	461a      	mov	r2, r3
 8003866:	d30b      	bcc.n	8003880 <quorem+0x108>
 8003868:	f8c8 4010 	str.w	r4, [r8, #16]
 800386c:	4628      	mov	r0, r5
 800386e:	b003      	add	sp, #12
 8003870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	3b04      	subs	r3, #4
 8003878:	2a00      	cmp	r2, #0
 800387a:	d1ca      	bne.n	8003812 <quorem+0x9a>
 800387c:	3c01      	subs	r4, #1
 800387e:	e7c5      	b.n	800380c <quorem+0x94>
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	3b04      	subs	r3, #4
 8003884:	2a00      	cmp	r2, #0
 8003886:	d1ef      	bne.n	8003868 <quorem+0xf0>
 8003888:	3c01      	subs	r4, #1
 800388a:	e7ea      	b.n	8003862 <quorem+0xea>
 800388c:	2000      	movs	r0, #0
 800388e:	e7ee      	b.n	800386e <quorem+0xf6>

08003890 <_dtoa_r>:
 8003890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003894:	ec57 6b10 	vmov	r6, r7, d0
 8003898:	b097      	sub	sp, #92	; 0x5c
 800389a:	e9cd 6700 	strd	r6, r7, [sp]
 800389e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80038a0:	9107      	str	r1, [sp, #28]
 80038a2:	4604      	mov	r4, r0
 80038a4:	920a      	str	r2, [sp, #40]	; 0x28
 80038a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80038a8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80038aa:	b93e      	cbnz	r6, 80038bc <_dtoa_r+0x2c>
 80038ac:	2010      	movs	r0, #16
 80038ae:	f000 fdbd 	bl	800442c <malloc>
 80038b2:	6260      	str	r0, [r4, #36]	; 0x24
 80038b4:	6046      	str	r6, [r0, #4]
 80038b6:	6086      	str	r6, [r0, #8]
 80038b8:	6006      	str	r6, [r0, #0]
 80038ba:	60c6      	str	r6, [r0, #12]
 80038bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	b151      	cbz	r1, 80038d8 <_dtoa_r+0x48>
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	604a      	str	r2, [r1, #4]
 80038c6:	2301      	movs	r3, #1
 80038c8:	4093      	lsls	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7ff fc15 	bl	80030fc <_Bfree>
 80038d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	9b01      	ldr	r3, [sp, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bfbf      	itttt	lt
 80038de:	2301      	movlt	r3, #1
 80038e0:	602b      	strlt	r3, [r5, #0]
 80038e2:	9b01      	ldrlt	r3, [sp, #4]
 80038e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80038e8:	bfb2      	itee	lt
 80038ea:	9301      	strlt	r3, [sp, #4]
 80038ec:	2300      	movge	r3, #0
 80038ee:	602b      	strge	r3, [r5, #0]
 80038f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80038f4:	4ba8      	ldr	r3, [pc, #672]	; (8003b98 <_dtoa_r+0x308>)
 80038f6:	ea33 0308 	bics.w	r3, r3, r8
 80038fa:	d11b      	bne.n	8003934 <_dtoa_r+0xa4>
 80038fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80038fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	9b00      	ldr	r3, [sp, #0]
 8003906:	b923      	cbnz	r3, 8003912 <_dtoa_r+0x82>
 8003908:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800390c:	2800      	cmp	r0, #0
 800390e:	f000 8578 	beq.w	8004402 <_dtoa_r+0xb72>
 8003912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003914:	b953      	cbnz	r3, 800392c <_dtoa_r+0x9c>
 8003916:	4ba1      	ldr	r3, [pc, #644]	; (8003b9c <_dtoa_r+0x30c>)
 8003918:	e021      	b.n	800395e <_dtoa_r+0xce>
 800391a:	4ba1      	ldr	r3, [pc, #644]	; (8003ba0 <_dtoa_r+0x310>)
 800391c:	9302      	str	r3, [sp, #8]
 800391e:	3308      	adds	r3, #8
 8003920:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	9802      	ldr	r0, [sp, #8]
 8003926:	b017      	add	sp, #92	; 0x5c
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392c:	4b9b      	ldr	r3, [pc, #620]	; (8003b9c <_dtoa_r+0x30c>)
 800392e:	9302      	str	r3, [sp, #8]
 8003930:	3303      	adds	r3, #3
 8003932:	e7f5      	b.n	8003920 <_dtoa_r+0x90>
 8003934:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003938:	2200      	movs	r2, #0
 800393a:	2300      	movs	r3, #0
 800393c:	4630      	mov	r0, r6
 800393e:	4639      	mov	r1, r7
 8003940:	f7fd f86e 	bl	8000a20 <__aeabi_dcmpeq>
 8003944:	4681      	mov	r9, r0
 8003946:	b160      	cbz	r0, 8003962 <_dtoa_r+0xd2>
 8003948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800394a:	2301      	movs	r3, #1
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8553 	beq.w	80043fc <_dtoa_r+0xb6c>
 8003956:	4b93      	ldr	r3, [pc, #588]	; (8003ba4 <_dtoa_r+0x314>)
 8003958:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	9302      	str	r3, [sp, #8]
 8003960:	e7e0      	b.n	8003924 <_dtoa_r+0x94>
 8003962:	aa14      	add	r2, sp, #80	; 0x50
 8003964:	a915      	add	r1, sp, #84	; 0x54
 8003966:	ec47 6b10 	vmov	d0, r6, r7
 800396a:	4620      	mov	r0, r4
 800396c:	f7ff fe13 	bl	8003596 <__d2b>
 8003970:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003974:	4682      	mov	sl, r0
 8003976:	2d00      	cmp	r5, #0
 8003978:	d07e      	beq.n	8003a78 <_dtoa_r+0x1e8>
 800397a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800397e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003982:	4630      	mov	r0, r6
 8003984:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003988:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800398c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003990:	2200      	movs	r2, #0
 8003992:	4b85      	ldr	r3, [pc, #532]	; (8003ba8 <_dtoa_r+0x318>)
 8003994:	f7fc fc28 	bl	80001e8 <__aeabi_dsub>
 8003998:	a379      	add	r3, pc, #484	; (adr r3, 8003b80 <_dtoa_r+0x2f0>)
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f7fc fdd7 	bl	8000550 <__aeabi_dmul>
 80039a2:	a379      	add	r3, pc, #484	; (adr r3, 8003b88 <_dtoa_r+0x2f8>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f7fc fc20 	bl	80001ec <__adddf3>
 80039ac:	4606      	mov	r6, r0
 80039ae:	4628      	mov	r0, r5
 80039b0:	460f      	mov	r7, r1
 80039b2:	f7fc fd67 	bl	8000484 <__aeabi_i2d>
 80039b6:	a376      	add	r3, pc, #472	; (adr r3, 8003b90 <_dtoa_r+0x300>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc fdc8 	bl	8000550 <__aeabi_dmul>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4630      	mov	r0, r6
 80039c6:	4639      	mov	r1, r7
 80039c8:	f7fc fc10 	bl	80001ec <__adddf3>
 80039cc:	4606      	mov	r6, r0
 80039ce:	460f      	mov	r7, r1
 80039d0:	f7fd f858 	bl	8000a84 <__aeabi_d2iz>
 80039d4:	2200      	movs	r2, #0
 80039d6:	4683      	mov	fp, r0
 80039d8:	2300      	movs	r3, #0
 80039da:	4630      	mov	r0, r6
 80039dc:	4639      	mov	r1, r7
 80039de:	f7fd f829 	bl	8000a34 <__aeabi_dcmplt>
 80039e2:	b158      	cbz	r0, 80039fc <_dtoa_r+0x16c>
 80039e4:	4658      	mov	r0, fp
 80039e6:	f7fc fd4d 	bl	8000484 <__aeabi_i2d>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4630      	mov	r0, r6
 80039f0:	4639      	mov	r1, r7
 80039f2:	f7fd f815 	bl	8000a20 <__aeabi_dcmpeq>
 80039f6:	b908      	cbnz	r0, 80039fc <_dtoa_r+0x16c>
 80039f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80039fc:	f1bb 0f16 	cmp.w	fp, #22
 8003a00:	d859      	bhi.n	8003ab6 <_dtoa_r+0x226>
 8003a02:	496a      	ldr	r1, [pc, #424]	; (8003bac <_dtoa_r+0x31c>)
 8003a04:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a10:	f7fd f82e 	bl	8000a70 <__aeabi_dcmpgt>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d050      	beq.n	8003aba <_dtoa_r+0x22a>
 8003a18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8003a20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a22:	1b5d      	subs	r5, r3, r5
 8003a24:	1e6b      	subs	r3, r5, #1
 8003a26:	9306      	str	r3, [sp, #24]
 8003a28:	bf45      	ittet	mi
 8003a2a:	f1c5 0301 	rsbmi	r3, r5, #1
 8003a2e:	9305      	strmi	r3, [sp, #20]
 8003a30:	2300      	movpl	r3, #0
 8003a32:	2300      	movmi	r3, #0
 8003a34:	bf4c      	ite	mi
 8003a36:	9306      	strmi	r3, [sp, #24]
 8003a38:	9305      	strpl	r3, [sp, #20]
 8003a3a:	f1bb 0f00 	cmp.w	fp, #0
 8003a3e:	db3e      	blt.n	8003abe <_dtoa_r+0x22e>
 8003a40:	9b06      	ldr	r3, [sp, #24]
 8003a42:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003a46:	445b      	add	r3, fp
 8003a48:	9306      	str	r3, [sp, #24]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9308      	str	r3, [sp, #32]
 8003a4e:	9b07      	ldr	r3, [sp, #28]
 8003a50:	2b09      	cmp	r3, #9
 8003a52:	f200 80af 	bhi.w	8003bb4 <_dtoa_r+0x324>
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	bfc4      	itt	gt
 8003a5a:	3b04      	subgt	r3, #4
 8003a5c:	9307      	strgt	r3, [sp, #28]
 8003a5e:	9b07      	ldr	r3, [sp, #28]
 8003a60:	f1a3 0302 	sub.w	r3, r3, #2
 8003a64:	bfcc      	ite	gt
 8003a66:	2600      	movgt	r6, #0
 8003a68:	2601      	movle	r6, #1
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	f200 80ae 	bhi.w	8003bcc <_dtoa_r+0x33c>
 8003a70:	e8df f003 	tbb	[pc, r3]
 8003a74:	772f8482 	.word	0x772f8482
 8003a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003a7a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003a7c:	441d      	add	r5, r3
 8003a7e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	dd11      	ble.n	8003aaa <_dtoa_r+0x21a>
 8003a86:	9a00      	ldr	r2, [sp, #0]
 8003a88:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003a8c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003a90:	fa22 f000 	lsr.w	r0, r2, r0
 8003a94:	fa08 f303 	lsl.w	r3, r8, r3
 8003a98:	4318      	orrs	r0, r3
 8003a9a:	f7fc fce3 	bl	8000464 <__aeabi_ui2d>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003aa4:	3d01      	subs	r5, #1
 8003aa6:	9312      	str	r3, [sp, #72]	; 0x48
 8003aa8:	e772      	b.n	8003990 <_dtoa_r+0x100>
 8003aaa:	f1c3 0020 	rsb	r0, r3, #32
 8003aae:	9b00      	ldr	r3, [sp, #0]
 8003ab0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ab4:	e7f1      	b.n	8003a9a <_dtoa_r+0x20a>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e7b1      	b.n	8003a1e <_dtoa_r+0x18e>
 8003aba:	900e      	str	r0, [sp, #56]	; 0x38
 8003abc:	e7b0      	b.n	8003a20 <_dtoa_r+0x190>
 8003abe:	9b05      	ldr	r3, [sp, #20]
 8003ac0:	eba3 030b 	sub.w	r3, r3, fp
 8003ac4:	9305      	str	r3, [sp, #20]
 8003ac6:	f1cb 0300 	rsb	r3, fp, #0
 8003aca:	9308      	str	r3, [sp, #32]
 8003acc:	2300      	movs	r3, #0
 8003ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ad0:	e7bd      	b.n	8003a4e <_dtoa_r+0x1be>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	dd7a      	ble.n	8003bd2 <_dtoa_r+0x342>
 8003adc:	9304      	str	r3, [sp, #16]
 8003ade:	9303      	str	r3, [sp, #12]
 8003ae0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	606a      	str	r2, [r5, #4]
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	f101 0214 	add.w	r2, r1, #20
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d975      	bls.n	8003bdc <_dtoa_r+0x34c>
 8003af0:	6869      	ldr	r1, [r5, #4]
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7ff face 	bl	8003094 <_Balloc>
 8003af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003afa:	6028      	str	r0, [r5, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	9302      	str	r3, [sp, #8]
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	2b0e      	cmp	r3, #14
 8003b04:	f200 80e5 	bhi.w	8003cd2 <_dtoa_r+0x442>
 8003b08:	2e00      	cmp	r6, #0
 8003b0a:	f000 80e2 	beq.w	8003cd2 <_dtoa_r+0x442>
 8003b0e:	ed9d 7b00 	vldr	d7, [sp]
 8003b12:	f1bb 0f00 	cmp.w	fp, #0
 8003b16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003b1a:	dd74      	ble.n	8003c06 <_dtoa_r+0x376>
 8003b1c:	4a23      	ldr	r2, [pc, #140]	; (8003bac <_dtoa_r+0x31c>)
 8003b1e:	f00b 030f 	and.w	r3, fp, #15
 8003b22:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003b26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003b2a:	06f0      	lsls	r0, r6, #27
 8003b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b30:	d559      	bpl.n	8003be6 <_dtoa_r+0x356>
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <_dtoa_r+0x320>)
 8003b34:	ec51 0b17 	vmov	r0, r1, d7
 8003b38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b3c:	f7fc fe32 	bl	80007a4 <__aeabi_ddiv>
 8003b40:	e9cd 0100 	strd	r0, r1, [sp]
 8003b44:	f006 060f 	and.w	r6, r6, #15
 8003b48:	2503      	movs	r5, #3
 8003b4a:	4f19      	ldr	r7, [pc, #100]	; (8003bb0 <_dtoa_r+0x320>)
 8003b4c:	2e00      	cmp	r6, #0
 8003b4e:	d14c      	bne.n	8003bea <_dtoa_r+0x35a>
 8003b50:	4642      	mov	r2, r8
 8003b52:	464b      	mov	r3, r9
 8003b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b58:	f7fc fe24 	bl	80007a4 <__aeabi_ddiv>
 8003b5c:	e9cd 0100 	strd	r0, r1, [sp]
 8003b60:	e06a      	b.n	8003c38 <_dtoa_r+0x3a8>
 8003b62:	2301      	movs	r3, #1
 8003b64:	9309      	str	r3, [sp, #36]	; 0x24
 8003b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b68:	445b      	add	r3, fp
 8003b6a:	9304      	str	r3, [sp, #16]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	9303      	str	r3, [sp, #12]
 8003b72:	bfb8      	it	lt
 8003b74:	2301      	movlt	r3, #1
 8003b76:	e7b3      	b.n	8003ae0 <_dtoa_r+0x250>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e7ab      	b.n	8003ad4 <_dtoa_r+0x244>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e7f1      	b.n	8003b64 <_dtoa_r+0x2d4>
 8003b80:	636f4361 	.word	0x636f4361
 8003b84:	3fd287a7 	.word	0x3fd287a7
 8003b88:	8b60c8b3 	.word	0x8b60c8b3
 8003b8c:	3fc68a28 	.word	0x3fc68a28
 8003b90:	509f79fb 	.word	0x509f79fb
 8003b94:	3fd34413 	.word	0x3fd34413
 8003b98:	7ff00000 	.word	0x7ff00000
 8003b9c:	08004605 	.word	0x08004605
 8003ba0:	080045fc 	.word	0x080045fc
 8003ba4:	0800460a 	.word	0x0800460a
 8003ba8:	3ff80000 	.word	0x3ff80000
 8003bac:	08004528 	.word	0x08004528
 8003bb0:	08004500 	.word	0x08004500
 8003bb4:	2601      	movs	r6, #1
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9307      	str	r3, [sp, #28]
 8003bba:	9609      	str	r6, [sp, #36]	; 0x24
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	9304      	str	r3, [sp, #16]
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2312      	movs	r3, #18
 8003bc8:	920a      	str	r2, [sp, #40]	; 0x28
 8003bca:	e789      	b.n	8003ae0 <_dtoa_r+0x250>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd0:	e7f4      	b.n	8003bbc <_dtoa_r+0x32c>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	9304      	str	r3, [sp, #16]
 8003bd6:	9303      	str	r3, [sp, #12]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	e7f5      	b.n	8003bc8 <_dtoa_r+0x338>
 8003bdc:	686a      	ldr	r2, [r5, #4]
 8003bde:	3201      	adds	r2, #1
 8003be0:	606a      	str	r2, [r5, #4]
 8003be2:	0049      	lsls	r1, r1, #1
 8003be4:	e780      	b.n	8003ae8 <_dtoa_r+0x258>
 8003be6:	2502      	movs	r5, #2
 8003be8:	e7af      	b.n	8003b4a <_dtoa_r+0x2ba>
 8003bea:	07f1      	lsls	r1, r6, #31
 8003bec:	d508      	bpl.n	8003c00 <_dtoa_r+0x370>
 8003bee:	4640      	mov	r0, r8
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bf6:	f7fc fcab 	bl	8000550 <__aeabi_dmul>
 8003bfa:	3501      	adds	r5, #1
 8003bfc:	4680      	mov	r8, r0
 8003bfe:	4689      	mov	r9, r1
 8003c00:	1076      	asrs	r6, r6, #1
 8003c02:	3708      	adds	r7, #8
 8003c04:	e7a2      	b.n	8003b4c <_dtoa_r+0x2bc>
 8003c06:	f000 809d 	beq.w	8003d44 <_dtoa_r+0x4b4>
 8003c0a:	f1cb 0600 	rsb	r6, fp, #0
 8003c0e:	4b9f      	ldr	r3, [pc, #636]	; (8003e8c <_dtoa_r+0x5fc>)
 8003c10:	4f9f      	ldr	r7, [pc, #636]	; (8003e90 <_dtoa_r+0x600>)
 8003c12:	f006 020f 	and.w	r2, r6, #15
 8003c16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c22:	f7fc fc95 	bl	8000550 <__aeabi_dmul>
 8003c26:	e9cd 0100 	strd	r0, r1, [sp]
 8003c2a:	1136      	asrs	r6, r6, #4
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2502      	movs	r5, #2
 8003c30:	2e00      	cmp	r6, #0
 8003c32:	d17c      	bne.n	8003d2e <_dtoa_r+0x49e>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d191      	bne.n	8003b5c <_dtoa_r+0x2cc>
 8003c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8084 	beq.w	8003d48 <_dtoa_r+0x4b8>
 8003c40:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003c44:	2200      	movs	r2, #0
 8003c46:	4b93      	ldr	r3, [pc, #588]	; (8003e94 <_dtoa_r+0x604>)
 8003c48:	4640      	mov	r0, r8
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	f7fc fef2 	bl	8000a34 <__aeabi_dcmplt>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d079      	beq.n	8003d48 <_dtoa_r+0x4b8>
 8003c54:	9b03      	ldr	r3, [sp, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d076      	beq.n	8003d48 <_dtoa_r+0x4b8>
 8003c5a:	9b04      	ldr	r3, [sp, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	dd34      	ble.n	8003cca <_dtoa_r+0x43a>
 8003c60:	2200      	movs	r2, #0
 8003c62:	4b8d      	ldr	r3, [pc, #564]	; (8003e98 <_dtoa_r+0x608>)
 8003c64:	4640      	mov	r0, r8
 8003c66:	4649      	mov	r1, r9
 8003c68:	f7fc fc72 	bl	8000550 <__aeabi_dmul>
 8003c6c:	e9cd 0100 	strd	r0, r1, [sp]
 8003c70:	9e04      	ldr	r6, [sp, #16]
 8003c72:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003c76:	3501      	adds	r5, #1
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f7fc fc03 	bl	8000484 <__aeabi_i2d>
 8003c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c82:	f7fc fc65 	bl	8000550 <__aeabi_dmul>
 8003c86:	2200      	movs	r2, #0
 8003c88:	4b84      	ldr	r3, [pc, #528]	; (8003e9c <_dtoa_r+0x60c>)
 8003c8a:	f7fc faaf 	bl	80001ec <__adddf3>
 8003c8e:	4680      	mov	r8, r0
 8003c90:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003c94:	2e00      	cmp	r6, #0
 8003c96:	d15a      	bne.n	8003d4e <_dtoa_r+0x4be>
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4b81      	ldr	r3, [pc, #516]	; (8003ea0 <_dtoa_r+0x610>)
 8003c9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ca0:	f7fc faa2 	bl	80001e8 <__aeabi_dsub>
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	e9cd 0100 	strd	r0, r1, [sp]
 8003cac:	f7fc fee0 	bl	8000a70 <__aeabi_dcmpgt>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f040 829b 	bne.w	80041ec <_dtoa_r+0x95c>
 8003cb6:	4642      	mov	r2, r8
 8003cb8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cc0:	f7fc feb8 	bl	8000a34 <__aeabi_dcmplt>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	f040 828f 	bne.w	80041e8 <_dtoa_r+0x958>
 8003cca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003cce:	e9cd 2300 	strd	r2, r3, [sp]
 8003cd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f2c0 8150 	blt.w	8003f7a <_dtoa_r+0x6ea>
 8003cda:	f1bb 0f0e 	cmp.w	fp, #14
 8003cde:	f300 814c 	bgt.w	8003f7a <_dtoa_r+0x6ea>
 8003ce2:	4b6a      	ldr	r3, [pc, #424]	; (8003e8c <_dtoa_r+0x5fc>)
 8003ce4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003ce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f280 80da 	bge.w	8003ea8 <_dtoa_r+0x618>
 8003cf4:	9b03      	ldr	r3, [sp, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f300 80d6 	bgt.w	8003ea8 <_dtoa_r+0x618>
 8003cfc:	f040 8273 	bne.w	80041e6 <_dtoa_r+0x956>
 8003d00:	2200      	movs	r2, #0
 8003d02:	4b67      	ldr	r3, [pc, #412]	; (8003ea0 <_dtoa_r+0x610>)
 8003d04:	4640      	mov	r0, r8
 8003d06:	4649      	mov	r1, r9
 8003d08:	f7fc fc22 	bl	8000550 <__aeabi_dmul>
 8003d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d10:	f7fc fea4 	bl	8000a5c <__aeabi_dcmpge>
 8003d14:	9e03      	ldr	r6, [sp, #12]
 8003d16:	4637      	mov	r7, r6
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f040 824a 	bne.w	80041b2 <_dtoa_r+0x922>
 8003d1e:	9b02      	ldr	r3, [sp, #8]
 8003d20:	9a02      	ldr	r2, [sp, #8]
 8003d22:	1c5d      	adds	r5, r3, #1
 8003d24:	2331      	movs	r3, #49	; 0x31
 8003d26:	7013      	strb	r3, [r2, #0]
 8003d28:	f10b 0b01 	add.w	fp, fp, #1
 8003d2c:	e245      	b.n	80041ba <_dtoa_r+0x92a>
 8003d2e:	07f2      	lsls	r2, r6, #31
 8003d30:	d505      	bpl.n	8003d3e <_dtoa_r+0x4ae>
 8003d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d36:	f7fc fc0b 	bl	8000550 <__aeabi_dmul>
 8003d3a:	3501      	adds	r5, #1
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	1076      	asrs	r6, r6, #1
 8003d40:	3708      	adds	r7, #8
 8003d42:	e775      	b.n	8003c30 <_dtoa_r+0x3a0>
 8003d44:	2502      	movs	r5, #2
 8003d46:	e777      	b.n	8003c38 <_dtoa_r+0x3a8>
 8003d48:	465f      	mov	r7, fp
 8003d4a:	9e03      	ldr	r6, [sp, #12]
 8003d4c:	e794      	b.n	8003c78 <_dtoa_r+0x3e8>
 8003d4e:	9a02      	ldr	r2, [sp, #8]
 8003d50:	4b4e      	ldr	r3, [pc, #312]	; (8003e8c <_dtoa_r+0x5fc>)
 8003d52:	4432      	add	r2, r6
 8003d54:	9213      	str	r2, [sp, #76]	; 0x4c
 8003d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d58:	1e71      	subs	r1, r6, #1
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	d048      	beq.n	8003df0 <_dtoa_r+0x560>
 8003d5e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	2000      	movs	r0, #0
 8003d68:	494e      	ldr	r1, [pc, #312]	; (8003ea4 <_dtoa_r+0x614>)
 8003d6a:	f7fc fd1b 	bl	80007a4 <__aeabi_ddiv>
 8003d6e:	4642      	mov	r2, r8
 8003d70:	464b      	mov	r3, r9
 8003d72:	f7fc fa39 	bl	80001e8 <__aeabi_dsub>
 8003d76:	9d02      	ldr	r5, [sp, #8]
 8003d78:	4680      	mov	r8, r0
 8003d7a:	4689      	mov	r9, r1
 8003d7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d80:	f7fc fe80 	bl	8000a84 <__aeabi_d2iz>
 8003d84:	4606      	mov	r6, r0
 8003d86:	f7fc fb7d 	bl	8000484 <__aeabi_i2d>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d92:	f7fc fa29 	bl	80001e8 <__aeabi_dsub>
 8003d96:	3630      	adds	r6, #48	; 0x30
 8003d98:	f805 6b01 	strb.w	r6, [r5], #1
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	e9cd 0100 	strd	r0, r1, [sp]
 8003da4:	f7fc fe46 	bl	8000a34 <__aeabi_dcmplt>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d165      	bne.n	8003e78 <_dtoa_r+0x5e8>
 8003dac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003db0:	2000      	movs	r0, #0
 8003db2:	4938      	ldr	r1, [pc, #224]	; (8003e94 <_dtoa_r+0x604>)
 8003db4:	f7fc fa18 	bl	80001e8 <__aeabi_dsub>
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	f7fc fe3a 	bl	8000a34 <__aeabi_dcmplt>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	f040 80ba 	bne.w	8003f3a <_dtoa_r+0x6aa>
 8003dc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003dc8:	429d      	cmp	r5, r3
 8003dca:	f43f af7e 	beq.w	8003cca <_dtoa_r+0x43a>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <_dtoa_r+0x608>)
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	f7fc fbbb 	bl	8000550 <__aeabi_dmul>
 8003dda:	2200      	movs	r2, #0
 8003ddc:	4680      	mov	r8, r0
 8003dde:	4689      	mov	r9, r1
 8003de0:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <_dtoa_r+0x608>)
 8003de2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003de6:	f7fc fbb3 	bl	8000550 <__aeabi_dmul>
 8003dea:	e9cd 0100 	strd	r0, r1, [sp]
 8003dee:	e7c5      	b.n	8003d7c <_dtoa_r+0x4ec>
 8003df0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dfc:	f7fc fba8 	bl	8000550 <__aeabi_dmul>
 8003e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e04:	9d02      	ldr	r5, [sp, #8]
 8003e06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e0a:	f7fc fe3b 	bl	8000a84 <__aeabi_d2iz>
 8003e0e:	4606      	mov	r6, r0
 8003e10:	f7fc fb38 	bl	8000484 <__aeabi_i2d>
 8003e14:	3630      	adds	r6, #48	; 0x30
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e1e:	f7fc f9e3 	bl	80001e8 <__aeabi_dsub>
 8003e22:	f805 6b01 	strb.w	r6, [r5], #1
 8003e26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e28:	42ab      	cmp	r3, r5
 8003e2a:	4680      	mov	r8, r0
 8003e2c:	4689      	mov	r9, r1
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	d125      	bne.n	8003e80 <_dtoa_r+0x5f0>
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <_dtoa_r+0x614>)
 8003e36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e3a:	f7fc f9d7 	bl	80001ec <__adddf3>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4640      	mov	r0, r8
 8003e44:	4649      	mov	r1, r9
 8003e46:	f7fc fe13 	bl	8000a70 <__aeabi_dcmpgt>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d175      	bne.n	8003f3a <_dtoa_r+0x6aa>
 8003e4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e52:	2000      	movs	r0, #0
 8003e54:	4913      	ldr	r1, [pc, #76]	; (8003ea4 <_dtoa_r+0x614>)
 8003e56:	f7fc f9c7 	bl	80001e8 <__aeabi_dsub>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4640      	mov	r0, r8
 8003e60:	4649      	mov	r1, r9
 8003e62:	f7fc fde7 	bl	8000a34 <__aeabi_dcmplt>
 8003e66:	2800      	cmp	r0, #0
 8003e68:	f43f af2f 	beq.w	8003cca <_dtoa_r+0x43a>
 8003e6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003e70:	2b30      	cmp	r3, #48	; 0x30
 8003e72:	f105 32ff 	add.w	r2, r5, #4294967295
 8003e76:	d001      	beq.n	8003e7c <_dtoa_r+0x5ec>
 8003e78:	46bb      	mov	fp, r7
 8003e7a:	e04d      	b.n	8003f18 <_dtoa_r+0x688>
 8003e7c:	4615      	mov	r5, r2
 8003e7e:	e7f5      	b.n	8003e6c <_dtoa_r+0x5dc>
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <_dtoa_r+0x608>)
 8003e82:	f7fc fb65 	bl	8000550 <__aeabi_dmul>
 8003e86:	e9cd 0100 	strd	r0, r1, [sp]
 8003e8a:	e7bc      	b.n	8003e06 <_dtoa_r+0x576>
 8003e8c:	08004528 	.word	0x08004528
 8003e90:	08004500 	.word	0x08004500
 8003e94:	3ff00000 	.word	0x3ff00000
 8003e98:	40240000 	.word	0x40240000
 8003e9c:	401c0000 	.word	0x401c0000
 8003ea0:	40140000 	.word	0x40140000
 8003ea4:	3fe00000 	.word	0x3fe00000
 8003ea8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003eac:	9d02      	ldr	r5, [sp, #8]
 8003eae:	4642      	mov	r2, r8
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	f7fc fc75 	bl	80007a4 <__aeabi_ddiv>
 8003eba:	f7fc fde3 	bl	8000a84 <__aeabi_d2iz>
 8003ebe:	9000      	str	r0, [sp, #0]
 8003ec0:	f7fc fae0 	bl	8000484 <__aeabi_i2d>
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	f7fc fb42 	bl	8000550 <__aeabi_dmul>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	4639      	mov	r1, r7
 8003ed4:	f7fc f988 	bl	80001e8 <__aeabi_dsub>
 8003ed8:	9e00      	ldr	r6, [sp, #0]
 8003eda:	9f03      	ldr	r7, [sp, #12]
 8003edc:	3630      	adds	r6, #48	; 0x30
 8003ede:	f805 6b01 	strb.w	r6, [r5], #1
 8003ee2:	9e02      	ldr	r6, [sp, #8]
 8003ee4:	1bae      	subs	r6, r5, r6
 8003ee6:	42b7      	cmp	r7, r6
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	d138      	bne.n	8003f60 <_dtoa_r+0x6d0>
 8003eee:	f7fc f97d 	bl	80001ec <__adddf3>
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	460f      	mov	r7, r1
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4640      	mov	r0, r8
 8003efc:	4649      	mov	r1, r9
 8003efe:	f7fc fd99 	bl	8000a34 <__aeabi_dcmplt>
 8003f02:	b9c8      	cbnz	r0, 8003f38 <_dtoa_r+0x6a8>
 8003f04:	4632      	mov	r2, r6
 8003f06:	463b      	mov	r3, r7
 8003f08:	4640      	mov	r0, r8
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	f7fc fd88 	bl	8000a20 <__aeabi_dcmpeq>
 8003f10:	b110      	cbz	r0, 8003f18 <_dtoa_r+0x688>
 8003f12:	9b00      	ldr	r3, [sp, #0]
 8003f14:	07db      	lsls	r3, r3, #31
 8003f16:	d40f      	bmi.n	8003f38 <_dtoa_r+0x6a8>
 8003f18:	4651      	mov	r1, sl
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff f8ee 	bl	80030fc <_Bfree>
 8003f20:	2300      	movs	r3, #0
 8003f22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003f24:	702b      	strb	r3, [r5, #0]
 8003f26:	f10b 0301 	add.w	r3, fp, #1
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f43f acf8 	beq.w	8003924 <_dtoa_r+0x94>
 8003f34:	601d      	str	r5, [r3, #0]
 8003f36:	e4f5      	b.n	8003924 <_dtoa_r+0x94>
 8003f38:	465f      	mov	r7, fp
 8003f3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003f3e:	2a39      	cmp	r2, #57	; 0x39
 8003f40:	f105 33ff 	add.w	r3, r5, #4294967295
 8003f44:	d106      	bne.n	8003f54 <_dtoa_r+0x6c4>
 8003f46:	9a02      	ldr	r2, [sp, #8]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d107      	bne.n	8003f5c <_dtoa_r+0x6cc>
 8003f4c:	2330      	movs	r3, #48	; 0x30
 8003f4e:	7013      	strb	r3, [r2, #0]
 8003f50:	3701      	adds	r7, #1
 8003f52:	4613      	mov	r3, r2
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	3201      	adds	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e78d      	b.n	8003e78 <_dtoa_r+0x5e8>
 8003f5c:	461d      	mov	r5, r3
 8003f5e:	e7ec      	b.n	8003f3a <_dtoa_r+0x6aa>
 8003f60:	2200      	movs	r2, #0
 8003f62:	4ba4      	ldr	r3, [pc, #656]	; (80041f4 <_dtoa_r+0x964>)
 8003f64:	f7fc faf4 	bl	8000550 <__aeabi_dmul>
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	460f      	mov	r7, r1
 8003f70:	f7fc fd56 	bl	8000a20 <__aeabi_dcmpeq>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d09a      	beq.n	8003eae <_dtoa_r+0x61e>
 8003f78:	e7ce      	b.n	8003f18 <_dtoa_r+0x688>
 8003f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	f000 80cd 	beq.w	800411c <_dtoa_r+0x88c>
 8003f82:	9a07      	ldr	r2, [sp, #28]
 8003f84:	2a01      	cmp	r2, #1
 8003f86:	f300 80af 	bgt.w	80040e8 <_dtoa_r+0x858>
 8003f8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f8c:	2a00      	cmp	r2, #0
 8003f8e:	f000 80a7 	beq.w	80040e0 <_dtoa_r+0x850>
 8003f92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003f96:	9e08      	ldr	r6, [sp, #32]
 8003f98:	9d05      	ldr	r5, [sp, #20]
 8003f9a:	9a05      	ldr	r2, [sp, #20]
 8003f9c:	441a      	add	r2, r3
 8003f9e:	9205      	str	r2, [sp, #20]
 8003fa0:	9a06      	ldr	r2, [sp, #24]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	441a      	add	r2, r3
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	9206      	str	r2, [sp, #24]
 8003faa:	f7ff f947 	bl	800323c <__i2b>
 8003fae:	4607      	mov	r7, r0
 8003fb0:	2d00      	cmp	r5, #0
 8003fb2:	dd0c      	ble.n	8003fce <_dtoa_r+0x73e>
 8003fb4:	9b06      	ldr	r3, [sp, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	dd09      	ble.n	8003fce <_dtoa_r+0x73e>
 8003fba:	42ab      	cmp	r3, r5
 8003fbc:	9a05      	ldr	r2, [sp, #20]
 8003fbe:	bfa8      	it	ge
 8003fc0:	462b      	movge	r3, r5
 8003fc2:	1ad2      	subs	r2, r2, r3
 8003fc4:	9205      	str	r2, [sp, #20]
 8003fc6:	9a06      	ldr	r2, [sp, #24]
 8003fc8:	1aed      	subs	r5, r5, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	9306      	str	r3, [sp, #24]
 8003fce:	9b08      	ldr	r3, [sp, #32]
 8003fd0:	b1f3      	cbz	r3, 8004010 <_dtoa_r+0x780>
 8003fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80a5 	beq.w	8004124 <_dtoa_r+0x894>
 8003fda:	2e00      	cmp	r6, #0
 8003fdc:	dd10      	ble.n	8004000 <_dtoa_r+0x770>
 8003fde:	4639      	mov	r1, r7
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f7ff f9c0 	bl	8003368 <__pow5mult>
 8003fe8:	4652      	mov	r2, sl
 8003fea:	4601      	mov	r1, r0
 8003fec:	4607      	mov	r7, r0
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7ff f92d 	bl	800324e <__multiply>
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	4680      	mov	r8, r0
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f7ff f87f 	bl	80030fc <_Bfree>
 8003ffe:	46c2      	mov	sl, r8
 8004000:	9b08      	ldr	r3, [sp, #32]
 8004002:	1b9a      	subs	r2, r3, r6
 8004004:	d004      	beq.n	8004010 <_dtoa_r+0x780>
 8004006:	4651      	mov	r1, sl
 8004008:	4620      	mov	r0, r4
 800400a:	f7ff f9ad 	bl	8003368 <__pow5mult>
 800400e:	4682      	mov	sl, r0
 8004010:	2101      	movs	r1, #1
 8004012:	4620      	mov	r0, r4
 8004014:	f7ff f912 	bl	800323c <__i2b>
 8004018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800401a:	2b00      	cmp	r3, #0
 800401c:	4606      	mov	r6, r0
 800401e:	f340 8083 	ble.w	8004128 <_dtoa_r+0x898>
 8004022:	461a      	mov	r2, r3
 8004024:	4601      	mov	r1, r0
 8004026:	4620      	mov	r0, r4
 8004028:	f7ff f99e 	bl	8003368 <__pow5mult>
 800402c:	9b07      	ldr	r3, [sp, #28]
 800402e:	2b01      	cmp	r3, #1
 8004030:	4606      	mov	r6, r0
 8004032:	dd7c      	ble.n	800412e <_dtoa_r+0x89e>
 8004034:	f04f 0800 	mov.w	r8, #0
 8004038:	6933      	ldr	r3, [r6, #16]
 800403a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800403e:	6918      	ldr	r0, [r3, #16]
 8004040:	f7ff f8ae 	bl	80031a0 <__hi0bits>
 8004044:	f1c0 0020 	rsb	r0, r0, #32
 8004048:	9b06      	ldr	r3, [sp, #24]
 800404a:	4418      	add	r0, r3
 800404c:	f010 001f 	ands.w	r0, r0, #31
 8004050:	f000 8096 	beq.w	8004180 <_dtoa_r+0x8f0>
 8004054:	f1c0 0320 	rsb	r3, r0, #32
 8004058:	2b04      	cmp	r3, #4
 800405a:	f340 8087 	ble.w	800416c <_dtoa_r+0x8dc>
 800405e:	9b05      	ldr	r3, [sp, #20]
 8004060:	f1c0 001c 	rsb	r0, r0, #28
 8004064:	4403      	add	r3, r0
 8004066:	9305      	str	r3, [sp, #20]
 8004068:	9b06      	ldr	r3, [sp, #24]
 800406a:	4405      	add	r5, r0
 800406c:	4403      	add	r3, r0
 800406e:	9306      	str	r3, [sp, #24]
 8004070:	9b05      	ldr	r3, [sp, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	dd05      	ble.n	8004082 <_dtoa_r+0x7f2>
 8004076:	4651      	mov	r1, sl
 8004078:	461a      	mov	r2, r3
 800407a:	4620      	mov	r0, r4
 800407c:	f7ff f9c2 	bl	8003404 <__lshift>
 8004080:	4682      	mov	sl, r0
 8004082:	9b06      	ldr	r3, [sp, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	dd05      	ble.n	8004094 <_dtoa_r+0x804>
 8004088:	4631      	mov	r1, r6
 800408a:	461a      	mov	r2, r3
 800408c:	4620      	mov	r0, r4
 800408e:	f7ff f9b9 	bl	8003404 <__lshift>
 8004092:	4606      	mov	r6, r0
 8004094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004096:	2b00      	cmp	r3, #0
 8004098:	d074      	beq.n	8004184 <_dtoa_r+0x8f4>
 800409a:	4631      	mov	r1, r6
 800409c:	4650      	mov	r0, sl
 800409e:	f7ff fa02 	bl	80034a6 <__mcmp>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	da6e      	bge.n	8004184 <_dtoa_r+0x8f4>
 80040a6:	2300      	movs	r3, #0
 80040a8:	4651      	mov	r1, sl
 80040aa:	220a      	movs	r2, #10
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7ff f83c 	bl	800312a <__multadd>
 80040b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80040b8:	4682      	mov	sl, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 81a8 	beq.w	8004410 <_dtoa_r+0xb80>
 80040c0:	2300      	movs	r3, #0
 80040c2:	4639      	mov	r1, r7
 80040c4:	220a      	movs	r2, #10
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7ff f82f 	bl	800312a <__multadd>
 80040cc:	9b04      	ldr	r3, [sp, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	4607      	mov	r7, r0
 80040d2:	f300 80c8 	bgt.w	8004266 <_dtoa_r+0x9d6>
 80040d6:	9b07      	ldr	r3, [sp, #28]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	f340 80c4 	ble.w	8004266 <_dtoa_r+0x9d6>
 80040de:	e059      	b.n	8004194 <_dtoa_r+0x904>
 80040e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80040e6:	e756      	b.n	8003f96 <_dtoa_r+0x706>
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	1e5e      	subs	r6, r3, #1
 80040ec:	9b08      	ldr	r3, [sp, #32]
 80040ee:	42b3      	cmp	r3, r6
 80040f0:	bfbf      	itttt	lt
 80040f2:	9b08      	ldrlt	r3, [sp, #32]
 80040f4:	9608      	strlt	r6, [sp, #32]
 80040f6:	1af2      	sublt	r2, r6, r3
 80040f8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80040fa:	bfb6      	itet	lt
 80040fc:	189b      	addlt	r3, r3, r2
 80040fe:	1b9e      	subge	r6, r3, r6
 8004100:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004102:	9b03      	ldr	r3, [sp, #12]
 8004104:	bfb8      	it	lt
 8004106:	2600      	movlt	r6, #0
 8004108:	2b00      	cmp	r3, #0
 800410a:	bfb9      	ittee	lt
 800410c:	9b05      	ldrlt	r3, [sp, #20]
 800410e:	9a03      	ldrlt	r2, [sp, #12]
 8004110:	9d05      	ldrge	r5, [sp, #20]
 8004112:	9b03      	ldrge	r3, [sp, #12]
 8004114:	bfbc      	itt	lt
 8004116:	1a9d      	sublt	r5, r3, r2
 8004118:	2300      	movlt	r3, #0
 800411a:	e73e      	b.n	8003f9a <_dtoa_r+0x70a>
 800411c:	9e08      	ldr	r6, [sp, #32]
 800411e:	9d05      	ldr	r5, [sp, #20]
 8004120:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004122:	e745      	b.n	8003fb0 <_dtoa_r+0x720>
 8004124:	9a08      	ldr	r2, [sp, #32]
 8004126:	e76e      	b.n	8004006 <_dtoa_r+0x776>
 8004128:	9b07      	ldr	r3, [sp, #28]
 800412a:	2b01      	cmp	r3, #1
 800412c:	dc19      	bgt.n	8004162 <_dtoa_r+0x8d2>
 800412e:	9b00      	ldr	r3, [sp, #0]
 8004130:	b9bb      	cbnz	r3, 8004162 <_dtoa_r+0x8d2>
 8004132:	9b01      	ldr	r3, [sp, #4]
 8004134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004138:	b99b      	cbnz	r3, 8004162 <_dtoa_r+0x8d2>
 800413a:	9b01      	ldr	r3, [sp, #4]
 800413c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004140:	0d1b      	lsrs	r3, r3, #20
 8004142:	051b      	lsls	r3, r3, #20
 8004144:	b183      	cbz	r3, 8004168 <_dtoa_r+0x8d8>
 8004146:	9b05      	ldr	r3, [sp, #20]
 8004148:	3301      	adds	r3, #1
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	9b06      	ldr	r3, [sp, #24]
 800414e:	3301      	adds	r3, #1
 8004150:	9306      	str	r3, [sp, #24]
 8004152:	f04f 0801 	mov.w	r8, #1
 8004156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004158:	2b00      	cmp	r3, #0
 800415a:	f47f af6d 	bne.w	8004038 <_dtoa_r+0x7a8>
 800415e:	2001      	movs	r0, #1
 8004160:	e772      	b.n	8004048 <_dtoa_r+0x7b8>
 8004162:	f04f 0800 	mov.w	r8, #0
 8004166:	e7f6      	b.n	8004156 <_dtoa_r+0x8c6>
 8004168:	4698      	mov	r8, r3
 800416a:	e7f4      	b.n	8004156 <_dtoa_r+0x8c6>
 800416c:	d080      	beq.n	8004070 <_dtoa_r+0x7e0>
 800416e:	9a05      	ldr	r2, [sp, #20]
 8004170:	331c      	adds	r3, #28
 8004172:	441a      	add	r2, r3
 8004174:	9205      	str	r2, [sp, #20]
 8004176:	9a06      	ldr	r2, [sp, #24]
 8004178:	441a      	add	r2, r3
 800417a:	441d      	add	r5, r3
 800417c:	4613      	mov	r3, r2
 800417e:	e776      	b.n	800406e <_dtoa_r+0x7de>
 8004180:	4603      	mov	r3, r0
 8004182:	e7f4      	b.n	800416e <_dtoa_r+0x8de>
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	dc36      	bgt.n	80041f8 <_dtoa_r+0x968>
 800418a:	9b07      	ldr	r3, [sp, #28]
 800418c:	2b02      	cmp	r3, #2
 800418e:	dd33      	ble.n	80041f8 <_dtoa_r+0x968>
 8004190:	9b03      	ldr	r3, [sp, #12]
 8004192:	9304      	str	r3, [sp, #16]
 8004194:	9b04      	ldr	r3, [sp, #16]
 8004196:	b963      	cbnz	r3, 80041b2 <_dtoa_r+0x922>
 8004198:	4631      	mov	r1, r6
 800419a:	2205      	movs	r2, #5
 800419c:	4620      	mov	r0, r4
 800419e:	f7fe ffc4 	bl	800312a <__multadd>
 80041a2:	4601      	mov	r1, r0
 80041a4:	4606      	mov	r6, r0
 80041a6:	4650      	mov	r0, sl
 80041a8:	f7ff f97d 	bl	80034a6 <__mcmp>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	f73f adb6 	bgt.w	8003d1e <_dtoa_r+0x48e>
 80041b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041b4:	9d02      	ldr	r5, [sp, #8]
 80041b6:	ea6f 0b03 	mvn.w	fp, r3
 80041ba:	2300      	movs	r3, #0
 80041bc:	9303      	str	r3, [sp, #12]
 80041be:	4631      	mov	r1, r6
 80041c0:	4620      	mov	r0, r4
 80041c2:	f7fe ff9b 	bl	80030fc <_Bfree>
 80041c6:	2f00      	cmp	r7, #0
 80041c8:	f43f aea6 	beq.w	8003f18 <_dtoa_r+0x688>
 80041cc:	9b03      	ldr	r3, [sp, #12]
 80041ce:	b12b      	cbz	r3, 80041dc <_dtoa_r+0x94c>
 80041d0:	42bb      	cmp	r3, r7
 80041d2:	d003      	beq.n	80041dc <_dtoa_r+0x94c>
 80041d4:	4619      	mov	r1, r3
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7fe ff90 	bl	80030fc <_Bfree>
 80041dc:	4639      	mov	r1, r7
 80041de:	4620      	mov	r0, r4
 80041e0:	f7fe ff8c 	bl	80030fc <_Bfree>
 80041e4:	e698      	b.n	8003f18 <_dtoa_r+0x688>
 80041e6:	2600      	movs	r6, #0
 80041e8:	4637      	mov	r7, r6
 80041ea:	e7e2      	b.n	80041b2 <_dtoa_r+0x922>
 80041ec:	46bb      	mov	fp, r7
 80041ee:	4637      	mov	r7, r6
 80041f0:	e595      	b.n	8003d1e <_dtoa_r+0x48e>
 80041f2:	bf00      	nop
 80041f4:	40240000 	.word	0x40240000
 80041f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041fa:	bb93      	cbnz	r3, 8004262 <_dtoa_r+0x9d2>
 80041fc:	9b03      	ldr	r3, [sp, #12]
 80041fe:	9304      	str	r3, [sp, #16]
 8004200:	9d02      	ldr	r5, [sp, #8]
 8004202:	4631      	mov	r1, r6
 8004204:	4650      	mov	r0, sl
 8004206:	f7ff fab7 	bl	8003778 <quorem>
 800420a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800420e:	f805 9b01 	strb.w	r9, [r5], #1
 8004212:	9b02      	ldr	r3, [sp, #8]
 8004214:	9a04      	ldr	r2, [sp, #16]
 8004216:	1aeb      	subs	r3, r5, r3
 8004218:	429a      	cmp	r2, r3
 800421a:	f300 80dc 	bgt.w	80043d6 <_dtoa_r+0xb46>
 800421e:	9b02      	ldr	r3, [sp, #8]
 8004220:	2a01      	cmp	r2, #1
 8004222:	bfac      	ite	ge
 8004224:	189b      	addge	r3, r3, r2
 8004226:	3301      	addlt	r3, #1
 8004228:	4698      	mov	r8, r3
 800422a:	2300      	movs	r3, #0
 800422c:	9303      	str	r3, [sp, #12]
 800422e:	4651      	mov	r1, sl
 8004230:	2201      	movs	r2, #1
 8004232:	4620      	mov	r0, r4
 8004234:	f7ff f8e6 	bl	8003404 <__lshift>
 8004238:	4631      	mov	r1, r6
 800423a:	4682      	mov	sl, r0
 800423c:	f7ff f933 	bl	80034a6 <__mcmp>
 8004240:	2800      	cmp	r0, #0
 8004242:	f300 808d 	bgt.w	8004360 <_dtoa_r+0xad0>
 8004246:	d103      	bne.n	8004250 <_dtoa_r+0x9c0>
 8004248:	f019 0f01 	tst.w	r9, #1
 800424c:	f040 8088 	bne.w	8004360 <_dtoa_r+0xad0>
 8004250:	4645      	mov	r5, r8
 8004252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004256:	2b30      	cmp	r3, #48	; 0x30
 8004258:	f105 32ff 	add.w	r2, r5, #4294967295
 800425c:	d1af      	bne.n	80041be <_dtoa_r+0x92e>
 800425e:	4615      	mov	r5, r2
 8004260:	e7f7      	b.n	8004252 <_dtoa_r+0x9c2>
 8004262:	9b03      	ldr	r3, [sp, #12]
 8004264:	9304      	str	r3, [sp, #16]
 8004266:	2d00      	cmp	r5, #0
 8004268:	dd05      	ble.n	8004276 <_dtoa_r+0x9e6>
 800426a:	4639      	mov	r1, r7
 800426c:	462a      	mov	r2, r5
 800426e:	4620      	mov	r0, r4
 8004270:	f7ff f8c8 	bl	8003404 <__lshift>
 8004274:	4607      	mov	r7, r0
 8004276:	f1b8 0f00 	cmp.w	r8, #0
 800427a:	d04c      	beq.n	8004316 <_dtoa_r+0xa86>
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4620      	mov	r0, r4
 8004280:	f7fe ff08 	bl	8003094 <_Balloc>
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	3202      	adds	r2, #2
 8004288:	4605      	mov	r5, r0
 800428a:	0092      	lsls	r2, r2, #2
 800428c:	f107 010c 	add.w	r1, r7, #12
 8004290:	300c      	adds	r0, #12
 8004292:	f000 f8d3 	bl	800443c <memcpy>
 8004296:	2201      	movs	r2, #1
 8004298:	4629      	mov	r1, r5
 800429a:	4620      	mov	r0, r4
 800429c:	f7ff f8b2 	bl	8003404 <__lshift>
 80042a0:	9b00      	ldr	r3, [sp, #0]
 80042a2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80042a6:	9703      	str	r7, [sp, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	4607      	mov	r7, r0
 80042ae:	9305      	str	r3, [sp, #20]
 80042b0:	4631      	mov	r1, r6
 80042b2:	4650      	mov	r0, sl
 80042b4:	f7ff fa60 	bl	8003778 <quorem>
 80042b8:	9903      	ldr	r1, [sp, #12]
 80042ba:	4605      	mov	r5, r0
 80042bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80042c0:	4650      	mov	r0, sl
 80042c2:	f7ff f8f0 	bl	80034a6 <__mcmp>
 80042c6:	463a      	mov	r2, r7
 80042c8:	9000      	str	r0, [sp, #0]
 80042ca:	4631      	mov	r1, r6
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7ff f904 	bl	80034da <__mdiff>
 80042d2:	68c3      	ldr	r3, [r0, #12]
 80042d4:	4602      	mov	r2, r0
 80042d6:	bb03      	cbnz	r3, 800431a <_dtoa_r+0xa8a>
 80042d8:	4601      	mov	r1, r0
 80042da:	9006      	str	r0, [sp, #24]
 80042dc:	4650      	mov	r0, sl
 80042de:	f7ff f8e2 	bl	80034a6 <__mcmp>
 80042e2:	9a06      	ldr	r2, [sp, #24]
 80042e4:	4603      	mov	r3, r0
 80042e6:	4611      	mov	r1, r2
 80042e8:	4620      	mov	r0, r4
 80042ea:	9306      	str	r3, [sp, #24]
 80042ec:	f7fe ff06 	bl	80030fc <_Bfree>
 80042f0:	9b06      	ldr	r3, [sp, #24]
 80042f2:	b9a3      	cbnz	r3, 800431e <_dtoa_r+0xa8e>
 80042f4:	9a07      	ldr	r2, [sp, #28]
 80042f6:	b992      	cbnz	r2, 800431e <_dtoa_r+0xa8e>
 80042f8:	9a05      	ldr	r2, [sp, #20]
 80042fa:	b982      	cbnz	r2, 800431e <_dtoa_r+0xa8e>
 80042fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004300:	d029      	beq.n	8004356 <_dtoa_r+0xac6>
 8004302:	9b00      	ldr	r3, [sp, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	dd01      	ble.n	800430c <_dtoa_r+0xa7c>
 8004308:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800430c:	f108 0501 	add.w	r5, r8, #1
 8004310:	f888 9000 	strb.w	r9, [r8]
 8004314:	e753      	b.n	80041be <_dtoa_r+0x92e>
 8004316:	4638      	mov	r0, r7
 8004318:	e7c2      	b.n	80042a0 <_dtoa_r+0xa10>
 800431a:	2301      	movs	r3, #1
 800431c:	e7e3      	b.n	80042e6 <_dtoa_r+0xa56>
 800431e:	9a00      	ldr	r2, [sp, #0]
 8004320:	2a00      	cmp	r2, #0
 8004322:	db04      	blt.n	800432e <_dtoa_r+0xa9e>
 8004324:	d125      	bne.n	8004372 <_dtoa_r+0xae2>
 8004326:	9a07      	ldr	r2, [sp, #28]
 8004328:	bb1a      	cbnz	r2, 8004372 <_dtoa_r+0xae2>
 800432a:	9a05      	ldr	r2, [sp, #20]
 800432c:	bb0a      	cbnz	r2, 8004372 <_dtoa_r+0xae2>
 800432e:	2b00      	cmp	r3, #0
 8004330:	ddec      	ble.n	800430c <_dtoa_r+0xa7c>
 8004332:	4651      	mov	r1, sl
 8004334:	2201      	movs	r2, #1
 8004336:	4620      	mov	r0, r4
 8004338:	f7ff f864 	bl	8003404 <__lshift>
 800433c:	4631      	mov	r1, r6
 800433e:	4682      	mov	sl, r0
 8004340:	f7ff f8b1 	bl	80034a6 <__mcmp>
 8004344:	2800      	cmp	r0, #0
 8004346:	dc03      	bgt.n	8004350 <_dtoa_r+0xac0>
 8004348:	d1e0      	bne.n	800430c <_dtoa_r+0xa7c>
 800434a:	f019 0f01 	tst.w	r9, #1
 800434e:	d0dd      	beq.n	800430c <_dtoa_r+0xa7c>
 8004350:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004354:	d1d8      	bne.n	8004308 <_dtoa_r+0xa78>
 8004356:	2339      	movs	r3, #57	; 0x39
 8004358:	f888 3000 	strb.w	r3, [r8]
 800435c:	f108 0801 	add.w	r8, r8, #1
 8004360:	4645      	mov	r5, r8
 8004362:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004366:	2b39      	cmp	r3, #57	; 0x39
 8004368:	f105 32ff 	add.w	r2, r5, #4294967295
 800436c:	d03b      	beq.n	80043e6 <_dtoa_r+0xb56>
 800436e:	3301      	adds	r3, #1
 8004370:	e040      	b.n	80043f4 <_dtoa_r+0xb64>
 8004372:	2b00      	cmp	r3, #0
 8004374:	f108 0501 	add.w	r5, r8, #1
 8004378:	dd05      	ble.n	8004386 <_dtoa_r+0xaf6>
 800437a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800437e:	d0ea      	beq.n	8004356 <_dtoa_r+0xac6>
 8004380:	f109 0901 	add.w	r9, r9, #1
 8004384:	e7c4      	b.n	8004310 <_dtoa_r+0xa80>
 8004386:	9b02      	ldr	r3, [sp, #8]
 8004388:	9a04      	ldr	r2, [sp, #16]
 800438a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800438e:	1aeb      	subs	r3, r5, r3
 8004390:	4293      	cmp	r3, r2
 8004392:	46a8      	mov	r8, r5
 8004394:	f43f af4b 	beq.w	800422e <_dtoa_r+0x99e>
 8004398:	4651      	mov	r1, sl
 800439a:	2300      	movs	r3, #0
 800439c:	220a      	movs	r2, #10
 800439e:	4620      	mov	r0, r4
 80043a0:	f7fe fec3 	bl	800312a <__multadd>
 80043a4:	9b03      	ldr	r3, [sp, #12]
 80043a6:	9903      	ldr	r1, [sp, #12]
 80043a8:	42bb      	cmp	r3, r7
 80043aa:	4682      	mov	sl, r0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	f04f 020a 	mov.w	r2, #10
 80043b4:	4620      	mov	r0, r4
 80043b6:	d104      	bne.n	80043c2 <_dtoa_r+0xb32>
 80043b8:	f7fe feb7 	bl	800312a <__multadd>
 80043bc:	9003      	str	r0, [sp, #12]
 80043be:	4607      	mov	r7, r0
 80043c0:	e776      	b.n	80042b0 <_dtoa_r+0xa20>
 80043c2:	f7fe feb2 	bl	800312a <__multadd>
 80043c6:	2300      	movs	r3, #0
 80043c8:	9003      	str	r0, [sp, #12]
 80043ca:	220a      	movs	r2, #10
 80043cc:	4639      	mov	r1, r7
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7fe feab 	bl	800312a <__multadd>
 80043d4:	e7f3      	b.n	80043be <_dtoa_r+0xb2e>
 80043d6:	4651      	mov	r1, sl
 80043d8:	2300      	movs	r3, #0
 80043da:	220a      	movs	r2, #10
 80043dc:	4620      	mov	r0, r4
 80043de:	f7fe fea4 	bl	800312a <__multadd>
 80043e2:	4682      	mov	sl, r0
 80043e4:	e70d      	b.n	8004202 <_dtoa_r+0x972>
 80043e6:	9b02      	ldr	r3, [sp, #8]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d105      	bne.n	80043f8 <_dtoa_r+0xb68>
 80043ec:	9a02      	ldr	r2, [sp, #8]
 80043ee:	f10b 0b01 	add.w	fp, fp, #1
 80043f2:	2331      	movs	r3, #49	; 0x31
 80043f4:	7013      	strb	r3, [r2, #0]
 80043f6:	e6e2      	b.n	80041be <_dtoa_r+0x92e>
 80043f8:	4615      	mov	r5, r2
 80043fa:	e7b2      	b.n	8004362 <_dtoa_r+0xad2>
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <_dtoa_r+0xb94>)
 80043fe:	f7ff baae 	b.w	800395e <_dtoa_r+0xce>
 8004402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004404:	2b00      	cmp	r3, #0
 8004406:	f47f aa88 	bne.w	800391a <_dtoa_r+0x8a>
 800440a:	4b07      	ldr	r3, [pc, #28]	; (8004428 <_dtoa_r+0xb98>)
 800440c:	f7ff baa7 	b.w	800395e <_dtoa_r+0xce>
 8004410:	9b04      	ldr	r3, [sp, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f73f aef4 	bgt.w	8004200 <_dtoa_r+0x970>
 8004418:	9b07      	ldr	r3, [sp, #28]
 800441a:	2b02      	cmp	r3, #2
 800441c:	f77f aef0 	ble.w	8004200 <_dtoa_r+0x970>
 8004420:	e6b8      	b.n	8004194 <_dtoa_r+0x904>
 8004422:	bf00      	nop
 8004424:	08004609 	.word	0x08004609
 8004428:	080045fc 	.word	0x080045fc

0800442c <malloc>:
 800442c:	4b02      	ldr	r3, [pc, #8]	; (8004438 <malloc+0xc>)
 800442e:	4601      	mov	r1, r0
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	f7ff b92b 	b.w	800368c <_malloc_r>
 8004436:	bf00      	nop
 8004438:	20000028 	.word	0x20000028

0800443c <memcpy>:
 800443c:	b510      	push	{r4, lr}
 800443e:	1e43      	subs	r3, r0, #1
 8004440:	440a      	add	r2, r1
 8004442:	4291      	cmp	r1, r2
 8004444:	d100      	bne.n	8004448 <memcpy+0xc>
 8004446:	bd10      	pop	{r4, pc}
 8004448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800444c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004450:	e7f7      	b.n	8004442 <memcpy+0x6>

08004452 <memset>:
 8004452:	4402      	add	r2, r0
 8004454:	4603      	mov	r3, r0
 8004456:	4293      	cmp	r3, r2
 8004458:	d100      	bne.n	800445c <memset+0xa>
 800445a:	4770      	bx	lr
 800445c:	f803 1b01 	strb.w	r1, [r3], #1
 8004460:	e7f9      	b.n	8004456 <memset+0x4>

08004462 <__malloc_lock>:
 8004462:	4770      	bx	lr

08004464 <__malloc_unlock>:
 8004464:	4770      	bx	lr
	...

08004468 <_sbrk>:
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <_sbrk+0x14>)
 800446a:	6819      	ldr	r1, [r3, #0]
 800446c:	4602      	mov	r2, r0
 800446e:	b909      	cbnz	r1, 8004474 <_sbrk+0xc>
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <_sbrk+0x18>)
 8004472:	6019      	str	r1, [r3, #0]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	4402      	add	r2, r0
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	4770      	bx	lr
 800447c:	200000c0 	.word	0x200000c0
 8004480:	20000238 	.word	0x20000238

08004484 <_init>:
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004486:	bf00      	nop
 8004488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448a:	bc08      	pop	{r3}
 800448c:	469e      	mov	lr, r3
 800448e:	4770      	bx	lr

08004490 <_fini>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	bf00      	nop
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr
